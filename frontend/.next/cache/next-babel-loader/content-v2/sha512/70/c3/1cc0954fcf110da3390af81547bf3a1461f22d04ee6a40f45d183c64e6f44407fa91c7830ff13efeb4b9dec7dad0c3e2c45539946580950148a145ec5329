{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/node/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/node/app/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery {\\n    posts {\\n      nodes {\\n        date\\n        featuredImage {\\n          title\\n          sourceUrl\\n        }\\n        title\\n        author {\\n          id\\n        }\\n        id\\n        excerpt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport var __N_SSP = true;\nexport var POSTS_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useQuery = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  console.log(data.posts.nodes.excerpt);\n\n  if (loading && !loadingArticle) {\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, __jsx(MediaCard, {\n      title: \"Loading...\",\n      description: \"Loading...\",\n      imgTitle: \"Loading\",\n      imgURL: \"loading.gif\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: \"/\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }), \"))\");\n  } else {\n    var posts = data.posts.nodes;\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, posts.map(function (item, index) {\n      return __jsx(MediaCard, {\n        key: index,\n        title: item.title,\n        description: item.excerpt || \"\",\n        imgTitle: item.title,\n        imgURL: item.featuredImage.sourceUrl || \"image_not_found.png\",\n        cardWidth: 345,\n        imgHeight: 140,\n        link: \"posts/\".concat(item.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      });\n    }), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/about\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"About\"))));\n  }\n};\n\n_s(IndexPage, \"WmGm+hF3wSQyzYbyfPYfQTu+VqY=\", false, function () {\n  return [useQuery];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Link","Layout","gql","useQuery","NetworkStatus","MediaCard","POSTS_QUERY","IndexPage","context","clientName","notifyOnNetworkStatusChange","loading","data","networkStatus","loadingArticle","fetchMore","console","log","posts","nodes","excerpt","map","item","index","title","featuredImage","sourceUrl","id"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AACA,OAAO,IAAMC,WAAW,GAAGJ,GAAH,mBAAjB;;AAoBP,IAAMK,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACmBJ,QAAQ,CAACG,WAAD,EAAc;AAC7DE,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADoD;AAE7DC,IAAAA,2BAA2B,EAAE;AAFgC,GAAd,CAD3B;AAAA,MACdC,OADc,aACdA,OADc;AAAA,MACLC,IADK,aACLA,IADK;AAAA,MACCC,aADD,aACCA,aADD;;AAMtB,MAAMC,cAAc,GAAGD,aAAa,KAAKT,aAAa,CAACW,SAAvD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,KAAL,CAAWC,KAAX,CAAiBC,OAA7B;;AACA,MAAIT,OAAO,IAAI,CAACG,cAAhB,EAAgC;AAC9B,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AACE,MAAA,KAAK,EAAE,YADT;AAEE,MAAA,WAAW,EAAE,YAFf;AAGE,MAAA,QAAQ,EAAE,SAHZ;AAIE,MAAA,MAAM,EAAE,aAJV;AAKE,MAAA,SAAS,EAAE,GALb;AAME,MAAA,SAAS,EAAE,GANb;AAOE,MAAA,IAAI,KAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,OADF;AAcD,GAfD,MAeO;AACL,QAAMI,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWC,KAAzB;AACA,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD,EAAYC,KAAZ;AAAA,aACT,MAAC,SAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,KAAK,EAAED,IAAI,CAACE,KAFd;AAGE,QAAA,WAAW,EAAEF,IAAI,CAACF,OAAL,IAAgB,EAH/B;AAIE,QAAA,QAAQ,EAAEE,IAAI,CAACE,KAJjB;AAKE,QAAA,MAAM,EAAEF,IAAI,CAACG,aAAL,CAAmBC,SAAnB,IAAgC,qBAL1C;AAME,QAAA,SAAS,EAAE,GANb;AAOE,QAAA,SAAS,EAAE,GAPb;AAQE,QAAA,IAAI,kBAAWJ,IAAI,CAACK,EAAhB,CARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADS;AAAA,KAAV,CADH,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,CAbF,CADF;AAqBD;AACF,CA/CD;;GAAMpB,S;UACqCJ,Q;;;KADrCI,S;AA8DN,eAAeA,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        date\n        featuredImage {\n          title\n          sourceUrl\n        }\n        title\n        author {\n          id\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  console.log(data.posts.nodes.excerpt);\n  if (loading && !loadingArticle) {\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        <MediaCard\n          title={\"Loading...\"}\n          description={\"Loading...\"}\n          imgTitle={\"Loading\"}\n          imgURL={\"loading.gif\"}\n          cardWidth={345}\n          imgHeight={140}\n          link={`/`}\n        />\n        ))\n      </Layout>\n    );\n  } else {\n    const posts = data.posts.nodes;\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        {posts.map((item: any, index: number) => (\n          <MediaCard\n            key={index}\n            title={item.title}\n            description={item.excerpt || \"\"}\n            imgTitle={item.title}\n            imgURL={item.featuredImage.sourceUrl || \"image_not_found.png\"}\n            cardWidth={345}\n            imgHeight={140}\n            link={`posts/${item.id}`}\n          />\n        ))}\n        <p>\n          <Link href=\"/about\">\n            <a>About</a>\n          </Link>\n        </p>\n      </Layout>\n    );\n  }\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}