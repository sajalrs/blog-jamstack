{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport PostsList, { ITEMS_PER_PAGE } from \"../components/PostsList\";\nimport { CURSORS_QUERY, POSTS_QUERY } from \"./posts/pages/[page]\";\nimport { MENU_QUERY } from \"../components/Navbar\";\n\nconst IndexPage = ({\n  posts,\n  errors,\n  numOfPages,\n  menuListItems\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      menuListItems: menuListItems,\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    menuListItems: menuListItems,\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(PostsList, {\n    curDir: \"/posts\",\n    posts: posts,\n    pageNumber: 1,\n    numOfPages: numOfPages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default IndexPage;\nexport const getStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n    const cursors = await apolloClient.query({\n      query: CURSORS_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => [res.data.posts.edges[0], ...res.data.posts.edges.filter((_, index) => (index + 1) % ITEMS_PER_PAGE === 0)]);\n    const {\n      data\n    } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    const menuListItems = await apolloClient.query({\n      query: MENU_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => res.data.menuItems.edges.map(item => ({\n      title: item.label,\n      pageURL: item.url\n    })));\n    console.log(data.posts.edges[0].node.date);\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map(edge => edge.node),\n        numOfPages: cursors.length,\n        menuListItems\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/index.tsx"],"names":["Layout","initializeApollo","addApolloState","PostsList","ITEMS_PER_PAGE","CURSORS_QUERY","POSTS_QUERY","MENU_QUERY","IndexPage","posts","errors","numOfPages","menuListItems","color","getStaticProps","apolloClient","cursors","query","context","clientName","then","res","data","edges","filter","_","index","variables","first","last","after","before","menuItems","map","item","title","label","pageURL","url","console","log","node","date","props","edge","length","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { GetStaticProps } from \"next\";\nimport { Post } from \"./posts/[slug]\";\nimport PostsList, { ITEMS_PER_PAGE } from \"../components/PostsList\";\nimport { CURSORS_QUERY, POSTS_QUERY } from \"./posts/pages/[page]\";\nimport { MENU_QUERY, MenuListItem } from \"../components/Navbar\";\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n  menuListItems: MenuListItem[];\n};\n\nconst IndexPage = ({ posts, errors, numOfPages, menuListItems }: Props) => {\n  if (errors) {\n    return (\n      <Layout\n        menuListItems={menuListItems}\n        title=\"Error | Next.js + TypeScript Example\"\n      >\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      menuListItems={menuListItems}\n      title=\"Home | Next.js + TypeScript Example\"\n    >\n      <PostsList\n        curDir=\"/posts\"\n        posts={posts!}\n        pageNumber={1}\n        numOfPages={numOfPages}\n      />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n    \n    const menuListItems = await apolloClient\n      .query({\n        query: MENU_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>\n        res.data.menuItems.edges.map(\n          (item: { url: string; label: string}) => ({\n            title: item.label,\n            pageURL: item.url,\n          })\n        )\n      );\n\n      console.log(data.posts.edges[0].node.date);\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n        menuListItems,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}