{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor \n          node {\n            date\n            featuredImage {\n              title\n              sourceUrl\n            }\n            title\n            author {\n              id\n            }\n            id\n            slug\n            excerpt\n          }\n        }\n      }\n  }\n`;\n\nconst updateQuery = (previousResult, {\n  fetchMoreResult\n}) => {\n  return fetchMoreResult.posts.edges.length ? fetchMoreResult : previousResult;\n};\n\nconst IndexPage = () => {\n  const {\n    loading,\n    data,\n    networkStatus,\n    fetchMore\n  } = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    variables: {\n      first: 1,\n      last: null,\n      after: null,\n      before: null\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  if (loading && !loadingArticle) {\n    return __jsx(Layout, {\n      title: \"Loading | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, __jsx(MediaCard, {\n      title: \"Loading...\",\n      description: \"Loading...\",\n      imgTitle: \"Loading\",\n      imgURL: \"loading.gif\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), \"))\");\n  } else {\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"flex flex-col items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, data.posts.node.map((item, index) => __jsx(\"div\", {\n      className: \"m-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(MediaCard, {\n      key: index,\n      title: item.title,\n      description: item.excerpt || \"\",\n      imgTitle: item.title,\n      imgURL: item.featuredImage ? item.featuredImage.sourceUrl : \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `posts/${item.slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }))), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, data.posts.pageInfo.hasPreviousPage ? __jsx(IconButton, {\n      onClick: () => {\n        fetchMore({\n          variables: {\n            first: null,\n            after: null,\n            last: 1,\n            before: data.posts.pageInfo.startCursor || null\n          },\n          updateQuery\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }, __jsx(NavigateBeforeIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    })) : null, data.posts.pageInfo.hasNextPage ? __jsx(IconButton, {\n      onClick: () => {\n        fetchMore({\n          variables: {\n            first: 1,\n            after: data.posts.pageInfo.endCursor || null,\n            last: null,\n            before: null\n          },\n          updateQuery\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, __jsx(NavigateNextIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    })) : null)));\n  }\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    },\n    variables: {\n      first: 1,\n      last: null,\n      after: null,\n      before: null\n    }\n  });\n  return addApolloState(apolloClient, {\n    props: {}\n  });\n}\nexport default IndexPage;","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Layout","initializeApollo","addApolloState","gql","useQuery","NetworkStatus","MediaCard","IconButton","NavigateBeforeIcon","NavigateNextIcon","POSTS_QUERY","updateQuery","previousResult","fetchMoreResult","posts","edges","length","IndexPage","loading","data","networkStatus","fetchMore","context","clientName","variables","first","last","after","before","notifyOnNetworkStatusChange","loadingArticle","node","map","item","index","title","excerpt","featuredImage","sourceUrl","slug","pageInfo","hasPreviousPage","startCursor","hasNextPage","endCursor","getServerSideProps","apolloClient","query","props"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { FetchResult } from \"apollo-link\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor \n          node {\n            date\n            featuredImage {\n              title\n              sourceUrl\n            }\n            title\n            author {\n              id\n            }\n            id\n            slug\n            excerpt\n          }\n        }\n      }\n  }\n`;\n\nconst updateQuery = (previousResult: FetchResult, { fetchMoreResult }: {fetchMoreResult?: any}) => {\n  return fetchMoreResult.posts.edges.length ? fetchMoreResult : previousResult;\n};\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus, fetchMore } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    variables: {\n      first: 1,\n      last: null,\n      after: null,\n      before: null\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  if (loading && !loadingArticle) {\n    return (\n      <Layout title=\"Loading | Next.js + TypeScript Example\">\n        <MediaCard\n          title={\"Loading...\"}\n          description={\"Loading...\"}\n          imgTitle={\"Loading\"}\n          imgURL={\"loading.gif\"}\n          cardWidth={345}\n          imgHeight={140}\n          link={`/`}\n        />\n        ))\n      </Layout>\n    );\n  } else {\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        <div className=\"flex flex-col items-center\">\n          {data.posts.node.map((item: any, index: number) => (\n            <div className=\"m-4\">\n              <MediaCard\n                key={index}\n                title={item.title}\n                description={item.excerpt || \"\"}\n                imgTitle={item.title}\n                imgURL={\n                  item.featuredImage\n                    ? item.featuredImage.sourceUrl\n                    : \"image_not_found.png\"\n                }\n                cardWidth={345}\n                imgHeight={140}\n                link={`posts/${item.slug}`}\n              />\n            </div>\n          ))}\n          <div>\n            {data.posts.pageInfo.hasPreviousPage ? (\n              <IconButton\n                onClick={() => {\n                  fetchMore({\n                    variables: {\n                      first: null,\n                      after: null,\n                      last: 1,\n                      before: data.posts.pageInfo.startCursor || null,\n                    },\n                    updateQuery\n                  });\n                }}\n              >\n                <NavigateBeforeIcon />\n              </IconButton>\n            ) : null}\n\n            {data.posts.pageInfo.hasNextPage ? (\n              <IconButton\n                onClick={() => {\n                  fetchMore({\n                    variables: {\n                      first: 1,\n                      after: data.posts.pageInfo.endCursor || null,\n                      last: null,\n                      before: null,\n                    },\n                    updateQuery,\n                  });\n                }}\n              >\n                <NavigateNextIcon />\n              </IconButton>\n            ) : null}\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n    variables: {\n      first: 1,\n      last: null,\n      after: null,\n      before: null\n    }\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}