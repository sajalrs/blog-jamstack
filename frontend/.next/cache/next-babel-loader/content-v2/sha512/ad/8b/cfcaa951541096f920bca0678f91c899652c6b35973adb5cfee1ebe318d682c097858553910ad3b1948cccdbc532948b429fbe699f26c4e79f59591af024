{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/posts/pages/[page].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport PostsList, { ITEMS_PER_PAGE } from \"../../../components/PostsList\";\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\n\nconst IndexPage = ({\n  posts,\n  errors,\n  numOfPages\n}) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString());\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(PostsList, {\n    curDir: \"../\",\n    posts: posts,\n    pageNumber: pageNumber,\n    numOfPages: numOfPages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default IndexPage;\nexport const getStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n  const {\n    data\n  } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n\n  for (let i = 2; i <= numOfPages; i++) {\n    paths.push({\n      params: {\n        page: i.toString()\n      }\n    });\n  }\n\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const page = parseInt(params === null || params === void 0 ? void 0 : params.page);\n    const apolloClient = initializeApollo();\n    const cursors = await apolloClient.query({\n      query: CURSORS_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => [res.data.posts.edges[0], ...res.data.posts.edges.filter((_, index) => (index + 1) % ITEMS_PER_PAGE === 0)]);\n    const {\n      data\n    } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page - 1].cursor,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map(edge => edge.node),\n        numOfPages: cursors.length\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/posts/pages/[page].tsx"],"names":["Layout","initializeApollo","addApolloState","gql","useRouter","PostsList","ITEMS_PER_PAGE","POSTS_QUERY","CURSORS_QUERY","IndexPage","posts","errors","numOfPages","router","pageNumber","parseInt","query","page","toString","color","getStaticPaths","apolloClient","data","context","clientName","paths","Math","ceil","edges","length","i","push","params","fallback","getStaticProps","cursors","then","res","filter","_","index","variables","first","last","after","cursor","before","props","map","edge","node","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../../../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\nimport PostsList, {ITEMS_PER_PAGE} from \"../../../components/PostsList\";\nimport { Post } from \"../../../interfaces\";\n\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n};\n\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString());\n\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <PostsList curDir=\"../\" posts={posts!} pageNumber={pageNumber} numOfPages={numOfPages} />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n  for (let i = 2; i <= numOfPages; i++) {\n    paths.push({ params: { page: i.toString() } });\n  }\n\n  return { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const page = parseInt(params?.page! as string);\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page - 1].cursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}