{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/posts/[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../components/Layout\";\nimport { initializeApollo } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nconst POST_QUERY = gql`\n  query PostQuery($filter: String!) {\n    postBy(id: $filter) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\nexport const POSTS_ID_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst StaticPropsDetail = ({\n  post,\n  errors\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: `${post ? post.title : \"User Detail\"} | Next.js + TypeScript Example`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default StaticPropsDetail;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const apolloClient = initializeApollo();\n  const {\n    data\n  } = await apolloClient.query({\n    query: POSTS_ID_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  console.log(data);\n  const paths = data.posts.nodes.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const apolloClient = initializeApollo();\n    const {\n      data\n    } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: {\n        id\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    }); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return {\n      props: {\n        data\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/posts/[id].tsx"],"names":["Layout","initializeApollo","gql","POST_QUERY","POSTS_ID_QUERY","StaticPropsDetail","post","errors","color","title","getStaticPaths","apolloClient","data","query","context","clientName","console","log","paths","posts","nodes","map","id","params","toString","fallback","getStaticProps","variables","props","err","message"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,SAASC,gBAAT,QAAiD,wBAAjD;AACA,SAASC,GAAT,QAAoB,gBAApB;AAIA,MAAMC,UAAU,GAAGD,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,OAAO,MAAME,cAAc,GAAGF,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;;AAuBP,MAAMG,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA6B;AACrD,MAAIA,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDD,MADhD,CADF,CADF;AAOD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAG,GACND,IAAI,GAAGA,IAAI,CAACG,KAAR,GAAgB,aACrB,iCAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAnBD;;AAqBA,eAAeJ,iBAAf;AAEA,OAAO,MAAMK,cAA8B,GAAG,YAAY;AACxD;AAEA,QAAMC,YAAY,GAAGV,gBAAgB,EAArC;AAEA,QAAM;AAAEW,IAAAA;AAAF,MAAW,MAAMD,YAAY,CAACE,KAAb,CAAmB;AACxCA,IAAAA,KAAK,EAAET,cADiC;AAExCU,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AAF+B,GAAnB,CAAvB;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,QAAMM,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAsBC,EAAD,KAAkB;AACnDC,IAAAA,MAAM,EAAE;AAAED,MAAAA,EAAE,EAAEA,EAAE,CAACE,QAAH;AAAN;AAD2C,GAAlB,CAArB,CAAd,CAXwD,CAexD;AACA;;AACA,SAAO;AAAEN,IAAAA,KAAF;AAASO,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CAlBM,C,CAoBP;AACA;AACA;;AACA,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAEH,EAAAA;AAAF,CAAP,KAAsB;AAClE,MAAI;AACF,UAAMD,EAAE,GAAGC,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAED,EAAnB;AAEF,UAAMX,YAAY,GAAGV,gBAAgB,EAArC;AAEA,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAMD,YAAY,CAACE,KAAb,CAAmB;AACxCA,MAAAA,KAAK,EAAEV,UADiC;AAExCwB,MAAAA,SAAS,EAAE;AAACL,QAAAA;AAAD,OAF6B;AAGxCR,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd;AAH+B,KAAnB,CAAvB,CALI,CAYF;AACA;;AACA,WAAO;AAAEa,MAAAA,KAAK,EAAE;AAAEhB,QAAAA;AAAF;AAAT,KAAP;AACD,GAfD,CAeE,OAAOiB,GAAP,EAAY;AACZ,WAAO;AAAED,MAAAA,KAAK,EAAE;AAAErB,QAAAA,MAAM,EAAEsB,GAAG,CAACC;AAAd;AAAT,KAAP;AACD;AACF,CAnBM","sourcesContent":["import Layout from \"../../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\n\n\nconst POST_QUERY = gql`\n  query PostQuery($filter: String!) {\n    postBy(id: $filter) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\n\nexport const POSTS_ID_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\ntype Post = {\n  title: string;\n  content: string;\n  author: {\n    nickname: string;\n  };\n};\n\ntype Props = {\n  post?: Post;\n  errors?: string;\n};\n\nconst StaticPropsDetail = ({ post, errors }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      title={`${\n        post ? post.title : \"User Detail\"\n      } | Next.js + TypeScript Example`}\n    >\n    </Layout>\n  );\n};\n\nexport default StaticPropsDetail;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: POSTS_ID_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n  console.log(data);\n\n  const paths = data.posts.nodes.map((id: string ) => ({\n    params: { id: id.toString() },\n  }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id;\n\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: POST_QUERY,\n    variables: {id},\n    context: { clientName: \"wordPress\" },\n  });\n\n    \n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { data } };\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}