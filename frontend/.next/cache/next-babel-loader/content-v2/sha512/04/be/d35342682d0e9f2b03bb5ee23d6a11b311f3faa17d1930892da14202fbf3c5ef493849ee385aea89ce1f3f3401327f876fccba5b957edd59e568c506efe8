{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport merge from \"deepmerge\";\nimport isEqual from \"lodash/isEqual\";\nimport { ApolloLink } from \"apollo-link\";\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\nlet apolloClient;\nlet wordpressEndpoint = 'http://localhost:8080/graphql'; // // If we're running on Docker, use the WordPress container hostname instead of localhost.\n// if (process.env.HOME === '/home/node') {\n//   wordpressEndpoint = 'http://wp-headless:8080/graphql';\n// }\n\nconst internalAPI = createHttpLink({\n  uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`,\n  credentials: \"same-origin\"\n});\nconst wordPressAPI = createHttpLink({\n  // uri: \"http://wp-headless:8080/graphql\",\n  uri: wordpressEndpoint\n});\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    // link: new HttpLink({\n    //   uri: `http://wordpress:80/graphql`, // Server URL (must be absolute)\n    //   // credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n    // }),\n    link: ApolloLink.split(operation => operation.getContext().clientName === \"wordPress\", wordPressAPI, internalAPI),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [...sourceArray, ...destinationArray.filter(d => sourceArray.every(s => !isEqual(d, s)))]\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps !== null && pageProps !== void 0 && pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}","map":{"version":3,"sources":["/home/sajalrs/WebDevelopment/blog-jamstack/frontend/lib/apolloClient.tsx"],"names":["useMemo","ApolloClient","InMemoryCache","createHttpLink","concatPagination","merge","isEqual","ApolloLink","APOLLO_STATE_PROP_NAME","apolloClient","wordpressEndpoint","internalAPI","uri","process","env","NEXT_PUBLIC_DOMAIN","credentials","wordPressAPI","createApolloClient","ssrMode","link","split","operation","getContext","clientName","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","data","arrayMerge","destinationArray","sourceArray","filter","d","every","s","restore","addApolloState","client","pageProps","props","useApollo","state","store"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  createHttpLink,\n  HttpLink\n} from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport merge from \"deepmerge\";\nimport isEqual from \"lodash/isEqual\";\nimport { ApolloLink } from \"apollo-link\";\n\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\nlet wordpressEndpoint = 'http://localhost:8080/graphql';\n\n// // If we're running on Docker, use the WordPress container hostname instead of localhost.\n// if (process.env.HOME === '/home/node') {\n//   wordpressEndpoint = 'http://wp-headless:8080/graphql';\n// }\n\nconst internalAPI = createHttpLink({\n  uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`,\n  credentials: \"same-origin\",\n}) as any;\n\nconst wordPressAPI = createHttpLink({\n  // uri: \"http://wp-headless:8080/graphql\",\n  uri: wordpressEndpoint,\n}) as any;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    // link: new HttpLink({\n    //   uri: `http://wordpress:80/graphql`, // Server URL (must be absolute)\n    //   // credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n    // }),\n    link: ApolloLink.split(\n        (operation : any) => operation.getContext().clientName === \"wordPress\",\n        wordPressAPI,\n        internalAPI\n    ) as any,\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  });\n}\n\nexport function initializeApollo(initialState: any | null = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n\n    // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [\n        ...sourceArray,\n        ...destinationArray.filter((d) =>\n          sourceArray.every((s) => !isEqual(d, s))\n        ),\n      ],\n    });\n\n    // Restore the cache with the merged data\n    _apolloClient.cache.restore(data);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function addApolloState(\n  client: ApolloClient<NormalizedCacheObject>,\n  pageProps: any\n) {\n  if (pageProps?.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\n\nexport function useApollo(pageProps: any) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}