{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nexport const POSTS_QUERY = gql`\n  query postsQuery($limit: Int, $offset: Int, $first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\nconst ITEMS_PER_PAGE = 3;\n\nconst updateQuery = (previousResult, {\n  fetchMoreResult\n}) => {\n  return fetchMoreResult.posts.edges.length ? fetchMoreResult : previousResult;\n};\n\nconst IndexPage = () => {\n  const {\n    loading,\n    data,\n    networkStatus,\n    fetchMore\n  } = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    variables: {\n      first: ITEMS_PER_PAGE,\n      last: null,\n      after: null,\n      before: null\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const {\n    posts\n  } = data;\n  console.log(posts.pageInfo.hasPreviousPage);\n\n  if (loading && !loadingArticle) {\n    return __jsx(Layout, {\n      title: \"Loading | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, __jsx(MediaCard, {\n      title: \"Loading...\",\n      description: \"Loading...\",\n      imgTitle: \"Loading\",\n      imgURL: \"loading.gif\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }), \"))\");\n  } else {\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"flex flex-col items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, posts.edges.map((edge, index) => {\n      const {\n        node\n      } = edge;\n      return __jsx(\"div\", {\n        className: \"m-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }\n      }, __jsx(MediaCard, {\n        key: index,\n        title: node.title,\n        description: node.excerpt || \"\",\n        imgTitle: node.title,\n        imgURL: node.featuredImage ? node.featuredImage.sourceUrl : \"image_not_found.png\",\n        cardWidth: 345,\n        imgHeight: 140,\n        link: `posts/${node.slug}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }));\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, __jsx(IconButton, {\n      onClick: () => {\n        fetchMore({\n          variables: {\n            first: null,\n            after: null,\n            last: ITEMS_PER_PAGE,\n            before: posts.pageInfo.startCursor || null\n          },\n          updateQuery\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, __jsx(NavigateBeforeIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    })), __jsx(IconButton, {\n      onClick: () => {\n        fetchMore({\n          variables: {\n            first: ITEMS_PER_PAGE,\n            after: posts.pageInfo.endCursor || null,\n            last: null,\n            before: null\n          },\n          updateQuery\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, __jsx(NavigateNextIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    })))));\n  }\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    },\n    variables: {\n      first: ITEMS_PER_PAGE,\n      last: null,\n      after: null,\n      before: null\n    }\n  });\n  return addApolloState(apolloClient, {\n    props: {}\n  });\n}\nexport default IndexPage;","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Layout","initializeApollo","addApolloState","gql","useQuery","NetworkStatus","MediaCard","IconButton","NavigateBeforeIcon","NavigateNextIcon","POSTS_QUERY","ITEMS_PER_PAGE","updateQuery","previousResult","fetchMoreResult","posts","edges","length","IndexPage","loading","data","networkStatus","fetchMore","context","clientName","variables","first","last","after","before","notifyOnNetworkStatusChange","loadingArticle","console","log","pageInfo","hasPreviousPage","map","edge","index","node","title","excerpt","featuredImage","sourceUrl","slug","startCursor","endCursor","getServerSideProps","apolloClient","query","props"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { FetchResult } from \"apollo-link\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($limit: Int, $offset: Int, $first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\nconst ITEMS_PER_PAGE = 3;\n\nconst updateQuery = (\n  previousResult: FetchResult,\n  { fetchMoreResult }: { fetchMoreResult?: any }\n) => {\n  return fetchMoreResult.posts.edges.length ? fetchMoreResult : previousResult;\n};\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus, fetchMore } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    variables: {\n      first: ITEMS_PER_PAGE,\n      last: null,\n      after: null,\n      before: null,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const { posts } = data;\n  console.log(posts.pageInfo.hasPreviousPage);\n  if (loading && !loadingArticle) {\n    return (\n      <Layout title=\"Loading | Next.js + TypeScript Example\">\n        <MediaCard\n          title={\"Loading...\"}\n          description={\"Loading...\"}\n          imgTitle={\"Loading\"}\n          imgURL={\"loading.gif\"}\n          cardWidth={345}\n          imgHeight={140}\n          link={`/`}\n        />\n        ))\n      </Layout>\n    );\n  } else {\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        <div className=\"flex flex-col items-center\">\n          {posts.edges.map((edge: any, index: number) => {\n            const { node } = edge;\n            return (\n              <div className=\"m-4\">\n                <MediaCard\n                  key={index}\n                  title={node.title}\n                  description={node.excerpt || \"\"}\n                  imgTitle={node.title}\n                  imgURL={\n                    node.featuredImage\n                      ? node.featuredImage.sourceUrl\n                      : \"image_not_found.png\"\n                  }\n                  cardWidth={345}\n                  imgHeight={140}\n                  link={`posts/${node.slug}`}\n                />\n              </div>\n            );\n          })}\n          <div>\n           \n              <IconButton\n                onClick={() => {\n                  fetchMore({\n                    variables: {\n                      first: null,\n                      after: null,\n                      last: ITEMS_PER_PAGE,\n                      before: posts.pageInfo.startCursor || null,\n                    },\n                    updateQuery,\n                  });\n                }}\n              >\n                <NavigateBeforeIcon />\n              </IconButton>\n    \n\n            \n              <IconButton\n                onClick={() => {\n                  fetchMore({\n                    variables: {\n                      first: ITEMS_PER_PAGE,\n                      after: posts.pageInfo.endCursor || null,\n                      last: null,\n                      before: null,\n                    },\n                    updateQuery,\n                  });\n                }}\n              >\n                <NavigateNextIcon />\n              </IconButton>\n            \n          </div>\n        </div>\n      </Layout>\n    );\n  }\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n    variables: {\n      first: ITEMS_PER_PAGE,\n      last: null,\n      after: null,\n      before: null,\n    },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}