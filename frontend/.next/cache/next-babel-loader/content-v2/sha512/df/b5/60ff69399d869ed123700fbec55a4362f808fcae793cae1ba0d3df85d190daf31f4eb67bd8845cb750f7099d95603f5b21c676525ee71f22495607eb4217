{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/[page].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { useRouter } from \"next/router\";\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\nexport const ITEMS_PER_PAGE = 2;\nexport const postsList = posts => posts.map((post, index) => {\n  return __jsx(\"div\", {\n    className: \"m-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(MediaCard, {\n    key: index,\n    title: post.title,\n    description: post.excerpt || \"\",\n    imgTitle: post.title,\n    imgURL: post.featuredImage ? post.featuredImage.sourceUrl : \"image_not_found.png\",\n    cardWidth: 345,\n    imgHeight: 140,\n    link: `posts/${post.slug}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n});\n\nconst IndexPage = ({\n  posts,\n  errors,\n  numOfPages\n}) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString());\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"flex flex-col items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, postsList(posts), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton, {\n    onClick: () => {\n      router.push(pageNumber === 2 ? \"/\" : `/${pageNumber - 1}`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(NavigateBeforeIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  })), pageNumber !== numOfPages ? __jsx(IconButton, {\n    onClick: () => {\n      router.push(`/${pageNumber + 1}`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, __jsx(NavigateNextIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })) : null)));\n};\n\nexport default IndexPage;\nexport const getStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n  const {\n    data\n  } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n\n  for (let i = 2; i <= numOfPages; i++) {\n    paths.push({\n      params: {\n        page: i.toString()\n      }\n    });\n  }\n\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const page = parseInt(params === null || params === void 0 ? void 0 : params.page);\n    const apolloClient = initializeApollo();\n    const cursors = await apolloClient.query({\n      query: CURSORS_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => [res.data.posts.edges[0], ...res.data.posts.edges.filter((_, index) => (index + 1) % ITEMS_PER_PAGE === 0)]);\n    const {\n      data\n    } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page - 1].cursor,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map(edge => edge.node),\n        numOfPages: cursors.length\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/[page].tsx"],"names":["Layout","initializeApollo","addApolloState","gql","MediaCard","IconButton","NavigateBeforeIcon","NavigateNextIcon","useRouter","POSTS_QUERY","CURSORS_QUERY","ITEMS_PER_PAGE","postsList","posts","map","post","index","title","excerpt","featuredImage","sourceUrl","slug","IndexPage","errors","numOfPages","router","pageNumber","parseInt","query","page","toString","color","push","getStaticPaths","apolloClient","data","context","clientName","paths","Math","ceil","edges","length","i","params","fallback","getStaticProps","cursors","then","res","filter","_","variables","first","last","after","cursor","before","props","edge","node","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\nexport type Post = {\n  date: string;\n  featuredImage: {\n    title: string;\n    sourceUrl: string;\n  };\n  title: string;\n  author: {\n    id: string;\n  };\n  id: string;\n  slug: string;\n  excerpt: string;\n};\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages?: number;\n};\n\n\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\n\nexport const ITEMS_PER_PAGE = 2;\n\nexport const postsList = (posts: Post[]) => (\n  posts.map((post: Post, index: number) => {\n    return (\n      <div className=\"m-4\">\n        <MediaCard\n          key={index}\n          title={post.title}\n          description={post.excerpt || \"\"}\n          imgTitle={post.title}\n          imgURL={\n            post.featuredImage\n              ? post.featuredImage.sourceUrl\n              : \"image_not_found.png\"\n          }\n          cardWidth={345}\n          imgHeight={140}\n          link={`posts/${post.slug}`}\n        />\n      </div>\n    );\n  })\n)\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString());\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <div className=\"flex flex-col items-center\">\n          {postsList(posts!)}\n        <div>\n          <IconButton\n            onClick={() => {\n              router.push(pageNumber === 2 ? \"/\" : `/${pageNumber - 1}`);\n            }}\n          >\n            <NavigateBeforeIcon />\n          </IconButton>\n          {pageNumber !== numOfPages ? (\n            <IconButton\n              onClick={() => {\n                router.push(`/${pageNumber + 1}`);\n              }}\n            >\n              <NavigateNextIcon />\n            </IconButton>\n          ) : null}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n  for (let i = 2; i <= numOfPages; i++) {\n    paths.push({ params: { page: i.toString() } });\n  }\n\n  return { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const page = parseInt(params?.page! as string);\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page - 1].cursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}