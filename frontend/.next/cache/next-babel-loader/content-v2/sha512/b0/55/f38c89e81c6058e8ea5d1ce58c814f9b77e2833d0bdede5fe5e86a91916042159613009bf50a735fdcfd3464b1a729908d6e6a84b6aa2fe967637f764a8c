{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/node/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/node/app/pages/posts/[id].tsx\",\n    _this = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery {\\n    posts {\\n      nodes {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from \"../../components/Layout\";\nimport { gql } from \"@apollo/client\";\nexport var __N_SSG = true;\nexport var POSTS_ID_QUERY = gql(_templateObject());\n\nvar StaticPropsDetail = function StaticPropsDetail(_ref) {\n  var post = _ref.post,\n      errors = _ref.errors;\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"\".concat(post ? post.title : \"User Detail\", \" | Next.js + TypeScript Example\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, post && __jsx(\"div\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: post.content\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }\n  }));\n};\n\n_c = StaticPropsDetail;\nexport default StaticPropsDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"StaticPropsDetail\");","map":{"version":3,"sources":["/home/node/app/pages/posts/[id].tsx"],"names":["Layout","gql","POSTS_ID_QUERY","StaticPropsDetail","post","errors","color","title","__html","content"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AAEA,SAASC,GAAT,QAAoB,gBAApB;;AAeA,OAAO,IAAMC,cAAc,GAAGD,GAAH,mBAApB;;AAwBP,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,OAA6B;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;;AACrD,MAAIA,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDD,MADhD,CADF,CADF;AAOD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,KAAK,YACHD,IAAI,GAAGA,IAAI,CAACG,KAAR,GAAgB,aADjB,oCADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,IAAI,IAAI;AACP;AACA,IAAA,uBAAuB,EAAE;AACvBI,MAAAA,MAAM,EAAEJ,IAAI,CAACK;AADU,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALX,CADF;AAcD,CAzBD;;KAAMN,iB;AA2BN,eAAeA,iBAAf","sourcesContent":["import Layout from \"../../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\n\nconst POST_QUERY = gql`\n  query PostQuery($id: ID!) {\n    postBy(id: $id) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\n\nexport const POSTS_ID_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\ntype Post = {\n  __typename: string;\n  title: string;\n  content: string;\n  author: {\n    nickname: string;\n  };\n};\n\ntype Props = {\n  post?: Post;\n  errors?: string;\n};\n\nconst StaticPropsDetail = ({ post, errors }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      title={`${\n        post ? post.title : \"User Detail\"\n      } | Next.js + TypeScript Example`}\n    >\n      {post && <div\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={{\n          __html: post.content,\n        }}\n      />}\n    </Layout>\n  );\n};\n\nexport default StaticPropsDetail;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: POSTS_ID_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  const paths = data.posts.nodes.map((node: { id: string }) => ({\n    params: { id: node.id.toString() },\n  }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id;\n\n    const apolloClient = initializeApollo();\n\n    const { data } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: { id },\n      context: { clientName: \"wordPress\" },\n    });\n\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { post: data.postBy } };\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}