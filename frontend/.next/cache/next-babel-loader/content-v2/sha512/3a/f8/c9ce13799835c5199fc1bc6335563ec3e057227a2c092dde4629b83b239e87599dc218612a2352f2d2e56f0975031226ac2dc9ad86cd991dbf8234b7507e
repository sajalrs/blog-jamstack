{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { addApolloState, initializeApollo } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MENU_QUERY } from \"../components/Navbar\";\nconst PAGES_QUERY = gql`\n  query pagesQuery($uri: String!) {\n    pageBy(uri: $uri) {\n      title\n      content\n    }\n  }\n`;\nexport const PAGES_SLUG_QUERY = gql`\n  query pagesSlugQuery($first: Int, $last: Int, $after: String, $before: String) {\n    pages(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          uri\n        }\n      }\n    }\n  }\n`;\n\nconst Page = ({\n  page,\n  errors,\n  menuListItems\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      menuListItems: menuListItems,\n      title: \"Error | Next.js + TypeScript Example\"\n    }, __jsx(\"p\", null, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    menuListItems: menuListItems,\n    title: `${page ? page.title : \"User Detail\"} | Next.js + TypeScript Example`\n  }, __jsx(\"div\", {\n    className: `flex justify-center items-center max-w-full`\n  }, __jsx(\"div\", {\n    className: \"m-4 max-w-4xl\"\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\"\n  }, page === null || page === void 0 ? void 0 : page.title), __jsx(\"div\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: page === null || page === void 0 ? void 0 : page.content\n    }\n  }))));\n};\n\nexport default Page;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const apolloClient = initializeApollo();\n  let paths = [];\n  let hasNextPage;\n  let nextCursor = null;\n\n  do {\n    const {\n      data\n    } = await apolloClient.query({\n      query: PAGES_SLUG_QUERY,\n      variables: {\n        first: 10,\n        last: null,\n        after: nextCursor,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    paths.push(...data.pages.edges.map(edge => {\n      const slashedUri = edge.node.uri.toString();\n      return {\n        params: {\n          uri: slashedUri.slice(1, slashedUri.length - 1)\n        }\n      };\n    }));\n    hasNextPage = data.pages.pageInfo.hasNextPage;\n    nextCursor = data.pages.pageInfo.endCursor;\n  } while (hasNextPage); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  // paths.push({params: {uri: 'about'}});\n\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const uri = params === null || params === void 0 ? void 0 : params.uri;\n    const apolloClient = initializeApollo();\n    const {\n      data\n    } = await apolloClient.query({\n      query: PAGES_QUERY,\n      variables: {\n        uri\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    const menuListItems = await apolloClient.query({\n      query: MENU_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => res.data.menuItems.nodes.map(node => ({\n      title: node.label,\n      pageURL: node.url\n    }))); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return addApolloState(apolloClient, {\n      props: {\n        page: data.pageBy,\n        menuListItems\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}