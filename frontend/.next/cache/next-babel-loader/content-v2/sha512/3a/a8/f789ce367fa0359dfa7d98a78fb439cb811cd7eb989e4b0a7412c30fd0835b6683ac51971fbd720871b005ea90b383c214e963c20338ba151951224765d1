{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/posts/[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../components/Layout\";\nimport { initializeApollo } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport Typography from \"@material-ui/core/Typography\";\nimport postStyles from \"./post.module.scss\";\nconst POST_QUERY = gql`\n  query PostQuery($id: ID!) {\n    postBy(id: $id) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\nexport const POSTS_ID_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst StaticPropsDetail = ({\n  post,\n  errors\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: `${post ? post.title : \"User Detail\"} | Next.js + TypeScript Example`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: `${postStyles[\"post\"]} flex justify-center items-center max-w-full`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"m-4 max-w-4xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, post === null || post === void 0 ? void 0 : post.title), __jsx(\"div\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: post === null || post === void 0 ? void 0 : post.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default StaticPropsDetail;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const apolloClient = initializeApollo();\n  const {\n    data\n  } = await apolloClient.query({\n    query: POSTS_ID_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  const paths = data.posts.nodes.map(node => ({\n    params: {\n      id: node.id.toString()\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const apolloClient = initializeApollo();\n    const {\n      data\n    } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: {\n        id\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    }); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return {\n      props: {\n        post: data.postBy\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/posts/[id].tsx"],"names":["Layout","initializeApollo","gql","Typography","postStyles","POST_QUERY","POSTS_ID_QUERY","StaticPropsDetail","post","errors","color","title","__html","content","getStaticPaths","apolloClient","data","query","context","clientName","paths","posts","nodes","map","node","params","id","toString","fallback","getStaticProps","variables","props","postBy","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../../components/Layout\";\nimport { initializeApollo } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Typography from \"@material-ui/core/Typography\";\nimport postStyles from \"./post.module.scss\";\n\nconst POST_QUERY = gql`\n  query PostQuery($id: ID!) {\n    postBy(id: $id) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\n\nexport const POSTS_ID_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\ntype Post = {\n  __typename: string;\n  title: string;\n  content: string;\n  author: {\n    nickname: string;\n  };\n};\n\ntype Props = {\n  post?: Post;\n  errors?: string;\n};\n\nconst StaticPropsDetail = ({ post, errors }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      title={`${\n        post ? post.title : \"User Detail\"\n      } | Next.js + TypeScript Example`}\n    >\n      <div className={`${postStyles[\"post\"]} flex justify-center items-center max-w-full`}>\n        <div className=\"m-4 max-w-4xl\">\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {post?.title}\n          </Typography>\n          <div\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: post?.content!!,\n            }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default StaticPropsDetail;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: POSTS_ID_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  const paths = data.posts.nodes.map((node: { id: string }) => ({\n    params: { id: node.id.toString() },\n  }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id;\n\n    const apolloClient = initializeApollo();\n\n    const { data } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: { id },\n      context: { clientName: \"wordPress\" },\n    });\n\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { post: data.postBy } };\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}