{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/usr/src/app/pages/index.tsx\",\n    _this = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery {\\n    posts {\\n      nodes {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { gql } from \"@apollo/client\";\nexport var __N_SSP = true;\nexport var POSTS_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage() {\n  // const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n  //   context: { clientName: \"wordPress\" },\n  //   notifyOnNetworkStatusChange: true,\n  // });\n  // const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  // let posts;\n  // if (loading && !loadingArticle) {\n  //   posts = [];\n  // } else {\n  //   posts = data.posts.nodes;\n  // }\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Hello Next.js \\uD83D\\uDC4B\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/about\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"About\"))));\n};\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/usr/src/app/pages/index.tsx"],"names":["Link","Layout","gql","POSTS_QUERY","IndexPage"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,GAAT,QAA6C,gBAA7C;;AAEA,OAAO,IAAMC,WAAW,GAAGD,GAAH,mBAAjB;;AAUP,IAAME,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CAHF,CADF;AAWD,CA1BD;;KAAMA,S;AA6CN,eAAeA,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  // const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n  //   context: { clientName: \"wordPress\" },\n  //   notifyOnNetworkStatusChange: true,\n  // });\n\n  // const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  // let posts;\n  // if (loading && !loadingArticle) {\n  //   posts = [];\n  // } else {\n  //   posts = data.posts.nodes;\n  // }\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <h1>Hello Next.js ðŸ‘‹</h1>\n      {/* {posts.map((item: any) => (<p>{item.id}</p>))} */}\n      <p>\n        <Link href=\"/about\">\n          <a>About</a>\n        </Link>\n      </p>\n    </Layout>\n  );\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  fetch('http://worpress:80/graphql')\n  .then(response => response.json())\n  .then(data => console.log(data))\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}