{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/node/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/node/app/pages/posts/[slug].tsx\",\n    _this = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\\n    posts(first: $first, last: $last, after: $after, before: $before) {\\n      pageInfo {\\n        hasNextPage\\n        hasPreviousPage\\n        startCursor\\n        endCursor\\n      }\\n      edges {\\n        cursor\\n        node {\\n          slug\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from \"../../components/Layout\";\nimport { gql } from \"@apollo/client\";\nimport Typography from \"@material-ui/core/Typography\";\nimport postStyles from \"./post.module.scss\";\nexport var __N_SSG = true;\nexport var POSTS_SLUG_QUERY = gql(_templateObject());\n\nvar Post = function Post(_ref) {\n  var post = _ref.post,\n      errors = _ref.errors,\n      menuListItems = _ref.menuListItems;\n\n  if (errors) {\n    return __jsx(Layout, {\n      menuListItems: menuListItems,\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"\".concat(post ? post.title : \"User Detail\", \" | Next.js + TypeScript Example\"),\n    menuListItems: menuListItems,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"\".concat(postStyles[\"post\"], \" flex justify-center items-center max-w-full\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, post === null || post === void 0 ? void 0 : post.title), __jsx(\"div\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: post === null || post === void 0 ? void 0 : post.content\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/node/app/pages/posts/[slug].tsx"],"names":["Layout","gql","Typography","postStyles","POSTS_SLUG_QUERY","Post","post","errors","menuListItems","color","title","__html","content"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAOC,UAAP,MAAuB,oBAAvB;;AAaA,OAAO,IAAMC,gBAAgB,GAAGH,GAAH,mBAAtB;;AAkCP,IAAMI,IAAI,GAAG,SAAPA,IAAO,OAA4C;AAAA,MAAzCC,IAAyC,QAAzCA,IAAyC;AAAA,MAAnCC,MAAmC,QAAnCA,MAAmC;AAAA,MAA3BC,aAA2B,QAA3BA,aAA2B;;AACvD,MAAID,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AACE,MAAA,aAAa,EAAEC,aADjB;AAEE,MAAA,KAAK,EAAC,sCAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDF,MADhD,CAJF,CADF;AAUD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,KAAK,YACHD,IAAI,GAAGA,IAAI,CAACI,KAAR,GAAgB,aADjB,oCADP;AAIE,IAAA,aAAa,EAAEF,aAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AACE,IAAA,SAAS,YAAKL,UAAU,CAAC,MAAD,CAAf,iDADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,YAAY,MAAxB;AAAyB,IAAA,OAAO,EAAC,IAAjC;AAAsC,IAAA,SAAS,EAAC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,IADH,aACGA,IADH,uBACGA,IAAI,CAAEI,KADT,CADF,EAIE;AACE;AACA,IAAA,uBAAuB,EAAE;AACvBC,MAAAA,MAAM,EAAEL,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM;AADS,KAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAHF,CANF,CADF;AAwBD,CAtCD;;KAAMP,I;AAwCN,eAAeA,IAAf","sourcesContent":["import Layout from \"../../components/Layout\";\nimport { addApolloState, initializeApollo } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MENU_QUERY, MenuListItem } from \"../../components/Navbar\";\nimport postStyles from \"./post.module.scss\";\nconst POST_QUERY = gql`\n  query PostQuery($slug: String!) {\n    postBy(slug: $slug) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\n\nexport const POSTS_SLUG_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          slug\n        }\n      }\n    }\n  }\n`;\n\ntype Post = {\n  __typename: string;\n  title: string;\n  content: string;\n  author: {\n    nickname: string;\n  };\n};\n\ntype Props = {\n  post?: Post;\n  errors?: string;\n  menuListItems: MenuListItem[];\n};\n\nconst Post = ({ post, errors, menuListItems }: Props) => {\n  if (errors) {\n    return (\n      <Layout\n        menuListItems={menuListItems}\n        title=\"Error | Next.js + TypeScript Example\"\n      >\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      title={`${\n        post ? post.title : \"User Detail\"\n      } | Next.js + TypeScript Example`}\n      menuListItems={menuListItems}\n    >\n      <div\n        className={`${postStyles[\"post\"]} flex justify-center items-center max-w-full`}\n      >\n        <div>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {post?.title}\n          </Typography>\n          <div\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: post?.content!!,\n            }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Post;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n\n  const apolloClient = initializeApollo();\n  let paths = [];\n  let hasNextPage;\n  let nextCursor = null;\n  do {\n    const { data }: any = await apolloClient.query({\n      query: POSTS_SLUG_QUERY,\n      variables: {\n        first: 10,\n        last: null,\n        after: nextCursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n    paths.push(\n      ...data.posts.edges.map((edge: any) => ({\n        params: { slug: edge.node.slug.toString() },\n      }))\n    );\n    hasNextPage = data.posts.pageInfo.hasNextPage;\n    nextCursor = data.posts.pageInfo.endCursor;\n  } while (hasNextPage);\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const slug = params?.slug;\n\n    const apolloClient = initializeApollo();\n\n    const { data } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: { slug },\n      context: { clientName: \"wordPress\" },\n    });\n\n    const menuListItems = await apolloClient\n      .query({\n        query: MENU_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>\n        res.data.headerMenu.map(\n          (item: { url: string; label: string; type: string }) => ({\n            title: item.label,\n            pageURL: item.url,\n          })\n        )\n      );\n\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return addApolloState(apolloClient, {\n      props: { post: data.postBy, menuListItems },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}