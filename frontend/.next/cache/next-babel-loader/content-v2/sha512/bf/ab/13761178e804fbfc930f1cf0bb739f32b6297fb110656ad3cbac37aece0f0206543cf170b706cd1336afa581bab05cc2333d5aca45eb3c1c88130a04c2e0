{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/sajalrs/WebDevelopment/blog-jamstack/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/posts/pages/[page].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query IDQuery {\\n    posts {\\n      edges {\\n        cursor\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\\n    posts(first: $first, last: $last, after: $after, before: $before) {\\n      edges {\\n        node {\\n          date\\n          featuredImage {\\n            title\\n            sourceUrl\\n          }\\n          title\\n          author {\\n            id\\n          }\\n          id\\n          slug\\n          excerpt\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from \"../../../components/Layout\";\nimport { gql } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nimport PostsList from \"../../../components/PostsList\";\nexport var __N_SSG = true;\nexport var POSTS_QUERY = gql(_templateObject());\nexport var CURSORS_QUERY = gql(_templateObject2());\n\nvar IndexPage = function IndexPage(_ref) {\n  _s();\n\n  var posts = _ref.posts,\n      errors = _ref.errors,\n      numOfPages = _ref.numOfPages,\n      menuListItems = _ref.menuListItems;\n  var router = useRouter();\n  var pageNumber = parseInt(router.query.page.toString());\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      menuListItems: menuListItems,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    menuListItems: menuListItems,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(PostsList, {\n    curDir: \"..\",\n    posts: posts,\n    pageNumber: pageNumber,\n    numOfPages: numOfPages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(IndexPage, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/posts/pages/[page].tsx"],"names":["Layout","gql","useRouter","PostsList","POSTS_QUERY","CURSORS_QUERY","IndexPage","posts","errors","numOfPages","menuListItems","router","pageNumber","parseInt","query","page","toString","color"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,4BAAnB;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAA0C,+BAA1C;;AAIA,OAAO,IAAMC,WAAW,GAAGH,GAAH,mBAAjB;AA8BP,OAAO,IAAMI,aAAa,GAAGJ,GAAH,oBAAnB;;AAUP,IAAMK,SAAS,GAAG,SAAZA,SAAY,OAAyD;AAAA;;AAAA,MAAtDC,KAAsD,QAAtDA,KAAsD;AAAA,MAA/CC,MAA+C,QAA/CA,MAA+C;AAAA,MAAvCC,UAAuC,QAAvCA,UAAuC;AAAA,MAA3BC,aAA2B,QAA3BA,aAA2B;AACzE,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,MAAMU,UAAU,GAAGC,QAAQ,CAACF,MAAM,CAACG,KAAP,CAAaC,IAAb,CAAkBC,QAAlB,EAAD,CAA3B;;AAEA,MAAIR,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AACA,MAAA,aAAa,EAAEE,aADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDT,MADhD,CAFF,CADF;AAQD;;AACD,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AACA,IAAA,aAAa,EAAEE,aADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,SAAD;AACE,IAAA,MAAM,EAAC,IADT;AAEE,IAAA,KAAK,EAAEH,KAFT;AAGE,IAAA,UAAU,EAAEK,UAHd;AAIE,IAAA,UAAU,EAAEH,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAWD,CAzBD;;GAAMH,S;UACWJ,S;;;KADXI,S;AA2BN,eAAeA,SAAf","sourcesContent":["import Layout from \"../../../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\nimport PostsList, { ITEMS_PER_PAGE } from \"../../../components/PostsList\";\nimport { Post } from \"../../../interfaces\";\nimport { MENU_QUERY, MenuListItem } from \"../../../components/Navbar\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n  menuListItems: MenuListItem[];\n};\n\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\n\nconst IndexPage = ({ posts, errors, numOfPages, menuListItems }: Props) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString());\n\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\"\n      menuListItems={menuListItems}>\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\"\n    menuListItems={menuListItems}>\n      <PostsList\n        curDir=\"..\"\n        posts={posts!}\n        pageNumber={pageNumber}\n        numOfPages={numOfPages}\n      />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n  for (let i = 1; i <= numOfPages; i++) {\n    paths.push({ params: { page: i.toString() } });\n  }\n\n  return { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const page = parseInt(params?.page! as string);\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: page === 1 ? null : cursors[page - 1].cursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n\n\n    const menuListItems = await apolloClient\n      .query({\n        query: MENU_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>\n        res.data.headerMenu.map(\n          (item: { url: string; label: string; type: string }) => ({\n            title: item.label,\n            pageURL: item.url,\n          })\n        )\n      );\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n        menuListItems,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}