{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport merge from \"deepmerge\";\nimport isEqual from \"lodash/isEqual\";\nexport var APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\nvar apolloClient; // const internalAPI = createHttpLink({\n//   uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`,\n//   credentials: \"same-origin\",\n// }) as any;\n// const wordPressAPI = createHttpLink({\n//   uri: \"http://wordpress:80/graphql\",\n// }) as any;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: \"http://wordpress:80/graphql\" // Server URL (must be absolute)\n      // credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    // link: ApolloLink.split(\n    //     (operation : any) => operation.getContext().clientName === \"wordPress\",\n    //     wordPressAPI,\n    //     internalAPI\n    // ) as any,\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    var data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: function arrayMerge(destinationArray, sourceArray) {\n        return [].concat(_toConsumableArray(sourceArray), _toConsumableArray(destinationArray.filter(function (d) {\n          return sourceArray.every(function (s) {\n            return !isEqual(d, s);\n          });\n        })));\n      }\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps !== null && pageProps !== void 0 && pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  _s();\n\n  var state = pageProps[APOLLO_STATE_PROP_NAME];\n  var store = useMemo(function () {\n    return initializeApollo(state);\n  }, [state]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/usr/src/app/lib/apolloClient.tsx"],"names":["useMemo","ApolloClient","InMemoryCache","HttpLink","concatPagination","merge","isEqual","APOLLO_STATE_PROP_NAME","apolloClient","createApolloClient","ssrMode","link","uri","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","data","arrayMerge","destinationArray","sourceArray","filter","d","every","s","restore","addApolloState","client","pageProps","props","useApollo","state","store"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,aAFF,EAKEC,QALF,QAMO,gBANP;AAOA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAGA,OAAO,IAAMC,sBAAsB,GAAG,kBAA/B;AAEP,IAAIC,YAAJ,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIR,QAAJ,CAAa;AACjBS,MAAAA,GAAG,+BADc,CACmB;AACpC;;AAFiB,KAAb,CAFgB;AAMtB;AACA;AACA;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,IAAIX,aAAJ,CAAkB;AACvBY,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEb,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AAXe,GAAjB,CAAP;AAqBD;;AAED,OAAO,SAASc,gBAAT,GAA2D;AAAA;;AAAA,MAAjCC,YAAiC,uEAAN,IAAM;;AAChE,MAAMC,aAAa,qBAAGZ,YAAH,2DAAmBC,kBAAkB,EAAxD,CADgE,CAGhE;AACA;;;AACA,MAAIU,YAAJ,EAAkB;AAChB;AACA,QAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAIhB;;;AACA,QAAMC,IAAI,GAAGlB,KAAK,CAACc,YAAD,EAAeE,aAAf,EAA8B;AAC9C;AACAG,MAAAA,UAAU,EAAE,oBAACC,gBAAD,EAAmBC,WAAnB;AAAA,4CACPA,WADO,sBAEPD,gBAAgB,CAACE,MAAjB,CAAwB,UAACC,CAAD;AAAA,iBACzBF,WAAW,CAACG,KAAZ,CAAkB,UAACC,CAAD;AAAA,mBAAO,CAACxB,OAAO,CAACsB,CAAD,EAAIE,CAAJ,CAAf;AAAA,WAAlB,CADyB;AAAA,SAAxB,CAFO;AAAA;AAFkC,KAA9B,CAAlB,CALgB,CAehB;;AACAV,IAAAA,aAAa,CAACP,KAAd,CAAoBkB,OAApB,CAA4BR,IAA5B;AACD,GAtB+D,CAuBhE;;;AACA,aAAmC,OAAOH,aAAP,CAxB6B,CAyBhE;;AACA,MAAI,CAACZ,YAAL,EAAmBA,YAAY,GAAGY,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASY,cAAT,CACLC,MADK,EAELC,SAFK,EAGL;AACA,MAAIA,SAAJ,aAAIA,SAAJ,eAAIA,SAAS,CAAEC,KAAf,EAAsB;AACpBD,IAAAA,SAAS,CAACC,KAAV,CAAgB5B,sBAAhB,IAA0C0B,MAAM,CAACpB,KAAP,CAAaS,OAAb,EAA1C;AACD;;AAED,SAAOY,SAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBF,SAAnB,EAAmC;AAAA;;AACxC,MAAMG,KAAK,GAAGH,SAAS,CAAC3B,sBAAD,CAAvB;AACA,MAAM+B,KAAK,GAAGtC,OAAO,CAAC;AAAA,WAAMkB,gBAAgB,CAACmB,KAAD,CAAtB;AAAA,GAAD,EAAgC,CAACA,KAAD,CAAhC,CAArB;AACA,SAAOC,KAAP;AACD;;GAJeF,S","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  createHttpLink,\n  HttpLink\n} from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport merge from \"deepmerge\";\nimport isEqual from \"lodash/isEqual\";\nimport { ApolloLink } from \"apollo-link\";\n\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\n// const internalAPI = createHttpLink({\n//   uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`,\n//   credentials: \"same-origin\",\n// }) as any;\n\n// const wordPressAPI = createHttpLink({\n//   uri: \"http://wordpress:80/graphql\",\n// }) as any;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: `http://wordpress:80/graphql`, // Server URL (must be absolute)\n      // credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n    }),\n    // link: ApolloLink.split(\n    //     (operation : any) => operation.getContext().clientName === \"wordPress\",\n    //     wordPressAPI,\n    //     internalAPI\n    // ) as any,\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  });\n}\n\nexport function initializeApollo(initialState: any | null = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n\n    // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [\n        ...sourceArray,\n        ...destinationArray.filter((d) =>\n          sourceArray.every((s) => !isEqual(d, s))\n        ),\n      ],\n    });\n\n    // Restore the cache with the merged data\n    _apolloClient.cache.restore(data);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function addApolloState(\n  client: ApolloClient<NormalizedCacheObject>,\n  pageProps: any\n) {\n  if (pageProps?.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\n\nexport function useApollo(pageProps: any) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}