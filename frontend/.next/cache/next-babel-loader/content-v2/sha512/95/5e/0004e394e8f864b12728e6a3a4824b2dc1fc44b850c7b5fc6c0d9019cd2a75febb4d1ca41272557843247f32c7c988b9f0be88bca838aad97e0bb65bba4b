{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/node/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/node/app/pages/[page].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query IDQuery {\\n    posts {\\n      edges {\\n        cursor\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\\n    posts(first: $first, last: $last, after: $after, before: $before) {\\n      edges {\\n        node {\\n          date\\n          featuredImage {\\n            title\\n            sourceUrl\\n          }\\n          title\\n          author {\\n            id\\n          }\\n          id\\n          slug\\n          excerpt\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from \"../components/Layout\";\nimport { gql } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport { useRouter } from \"next/router\";\nimport PageNav from \"../components/PageNav\";\nexport var __N_SSG = true;\nexport var ITEMS_PER_PAGE = 6;\nexport var POSTS_QUERY = gql(_templateObject());\nexport var CURSORS_QUERY = gql(_templateObject2());\n\nvar IndexPage = function IndexPage(_ref) {\n  _s();\n\n  var posts = _ref.posts,\n      errors = _ref.errors,\n      numOfPages = _ref.numOfPages;\n  var router = useRouter();\n  var pageNumber = parseInt(router.query.page.toString()); // let navigablePages = [];\n  // let start =\n  //   NUM_OF_NAV_PAGES * (Math.ceil(pageNumber / NUM_OF_NAV_PAGES) - 1) + 1;\n  // let end = Math.min(\n  //   NUM_OF_NAV_PAGES * Math.ceil(pageNumber / NUM_OF_NAV_PAGES),\n  //   numOfPages\n  // );\n  // if (start !== 1) {\n  //   navigablePages.push(\n  //     <IconButton\n  //       onClick={() => {\n  //         router.push(`/${start - 1}`);\n  //       }}\n  //     >\n  //       {\"...\"}\n  //     </IconButton>\n  //   );\n  // }\n  // for (let i = start; i <= end; i++) {\n  //   if (i === 1) {\n  //     navigablePages.push(\n  //       <IconButton\n  //         onClick={() => {\n  //           router.push(`/`);\n  //         }}\n  //       >\n  //         1\n  //       </IconButton>\n  //     );\n  //   } else if (pageNumber === i) {\n  //     navigablePages.push(\n  //       <IconButton\n  //         disabled\n  //         onClick={() => {\n  //           router.push(`/${i}`);\n  //         }}\n  //       >\n  //         {i}\n  //       </IconButton>\n  //     );\n  //   } else {\n  //     navigablePages.push(\n  //       <IconButton\n  //         onClick={() => {\n  //           router.push(`/${i}`);\n  //         }}\n  //       >\n  //         {i}\n  //       </IconButton>\n  //     );\n  //   }\n  // }\n  // if (end < numOfPages - 1) {\n  //   navigablePages.push(\n  //     <IconButton\n  //       onClick={() => {\n  //         router.push(`/${end + 1}`);\n  //       }}\n  //     >\n  //       {\"...\"}\n  //     </IconButton>\n  //   );\n  // }\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"flex flex-col items-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, posts.map(function (post, index) {\n    return __jsx(\"div\", {\n      className: \"m-4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, __jsx(MediaCard, {\n      key: index,\n      title: post.title,\n      description: post.excerpt || \"\",\n      imgTitle: post.title,\n      imgURL: post.featuredImage ? post.featuredImage.sourceUrl : \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: \"posts/\".concat(post.slug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }));\n  }), __jsx(PageNav, {\n    pageNumber: pageNumber,\n    numOfPages: numOfPages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(IndexPage, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/node/app/pages/[page].tsx"],"names":["Layout","gql","MediaCard","useRouter","PageNav","ITEMS_PER_PAGE","POSTS_QUERY","CURSORS_QUERY","IndexPage","posts","errors","numOfPages","router","pageNumber","parseInt","query","page","toString","color","map","post","index","title","excerpt","featuredImage","sourceUrl","slug"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAKA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,OAAO,IAAMC,cAAc,GAAG,CAAvB;AAGP,OAAO,IAAMC,WAAW,GAAGL,GAAH,mBAAjB;AA4CP,OAAO,IAAMM,aAAa,GAAGN,GAAH,oBAAnB;;AAUP,IAAMO,SAAS,GAAG,SAAZA,SAAY,OAA0C;AAAA;;AAAA,MAAvCC,KAAuC,QAAvCA,KAAuC;AAAA,MAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,UAAwB,QAAxBA,UAAwB;AAC1D,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,MAAMU,UAAU,GAAGC,QAAQ,CAACF,MAAM,CAACG,KAAP,CAAaC,IAAb,CAAkBC,QAAlB,EAAD,CAA3B,CAF0D,CAI1D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIP,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDR,MADhD,CADF,CADF;AAOD;;AACD,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAAEU,GAAP,CAAW,UAACC,IAAD,EAAaC,KAAb,EAA+B;AACzC,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAED,IAAI,CAACE,KAFd;AAGE,MAAA,WAAW,EAAEF,IAAI,CAACG,OAAL,IAAgB,EAH/B;AAIE,MAAA,QAAQ,EAAEH,IAAI,CAACE,KAJjB;AAKE,MAAA,MAAM,EACJF,IAAI,CAACI,aAAL,GACIJ,IAAI,CAACI,aAAL,CAAmBC,SADvB,GAEI,qBARR;AAUE,MAAA,SAAS,EAAE,GAVb;AAWE,MAAA,SAAS,EAAE,GAXb;AAYE,MAAA,IAAI,kBAAWL,IAAI,CAACM,IAAhB,CAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAkBD,GAnBA,CADH,EAwCE,MAAC,OAAD;AAAS,IAAA,UAAU,EAAEb,UAArB;AAAiC,IAAA,UAAU,EAAEF,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxCF,CADF,CADF;AA8CD,CA9HD;;GAAMH,S;UACWL,S;;;KADXK,S;AAgIN,eAAeA,SAAf","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\nimport PageNav from \"../components/PageNav\"\n\nexport const ITEMS_PER_PAGE = 6;\n\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\nexport type Post = {\n  date: string;\n  featuredImage: {\n    title: string;\n    sourceUrl: string;\n  };\n  title: string;\n  author: {\n    id: string;\n  };\n  id: string;\n  slug: string;\n  excerpt: string;\n};\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n};\n\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString());\n\n  // let navigablePages = [];\n  // let start =\n  //   NUM_OF_NAV_PAGES * (Math.ceil(pageNumber / NUM_OF_NAV_PAGES) - 1) + 1;\n  // let end = Math.min(\n  //   NUM_OF_NAV_PAGES * Math.ceil(pageNumber / NUM_OF_NAV_PAGES),\n  //   numOfPages\n  // );\n\n  // if (start !== 1) {\n  //   navigablePages.push(\n  //     <IconButton\n  //       onClick={() => {\n  //         router.push(`/${start - 1}`);\n  //       }}\n  //     >\n  //       {\"...\"}\n  //     </IconButton>\n  //   );\n  // }\n\n  // for (let i = start; i <= end; i++) {\n  //   if (i === 1) {\n  //     navigablePages.push(\n  //       <IconButton\n  //         onClick={() => {\n  //           router.push(`/`);\n  //         }}\n  //       >\n  //         1\n  //       </IconButton>\n  //     );\n  //   } else if (pageNumber === i) {\n  //     navigablePages.push(\n  //       <IconButton\n  //         disabled\n  //         onClick={() => {\n  //           router.push(`/${i}`);\n  //         }}\n  //       >\n  //         {i}\n  //       </IconButton>\n  //     );\n  //   } else {\n  //     navigablePages.push(\n  //       <IconButton\n  //         onClick={() => {\n  //           router.push(`/${i}`);\n  //         }}\n  //       >\n  //         {i}\n  //       </IconButton>\n  //     );\n  //   }\n  // }\n\n  // if (end < numOfPages - 1) {\n  //   navigablePages.push(\n  //     <IconButton\n  //       onClick={() => {\n  //         router.push(`/${end + 1}`);\n  //       }}\n  //     >\n  //       {\"...\"}\n  //     </IconButton>\n  //   );\n  // }\n\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <div className=\"flex flex-col items-center\">\n        {posts!.map((post: Post, index: number) => {\n          return (\n            <div className=\"m-4\">\n              <MediaCard\n                key={index}\n                title={post.title}\n                description={post.excerpt || \"\"}\n                imgTitle={post.title}\n                imgURL={\n                  post.featuredImage\n                    ? post.featuredImage.sourceUrl\n                    : \"image_not_found.png\"\n                }\n                cardWidth={345}\n                imgHeight={140}\n                link={`posts/${post.slug}`}\n              />\n            </div>\n          );\n        })}\n        {/* <div>\n          <IconButton\n            onClick={() => {\n              router.push(pageNumber === 2 ? \"/\" : `/${pageNumber - 1}`);\n            }}\n          >\n            <NavigateBeforeIcon />\n          </IconButton>\n          {navigablePages}\n          {pageNumber !== numOfPages ? (\n            <IconButton\n              onClick={() => {\n                router.push(`/${pageNumber + 1}`);\n              }}\n            >\n              <NavigateNextIcon />\n            </IconButton>\n          ) : null}\n        </div> */}\n        <PageNav pageNumber={pageNumber} numOfPages={numOfPages}/>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n  for (let i = 2; i <= numOfPages; i++) {\n    paths.push({ params: { page: i.toString() } });\n  }\n\n  return { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const page = parseInt(params?.page! as string);\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page - 1].cursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}