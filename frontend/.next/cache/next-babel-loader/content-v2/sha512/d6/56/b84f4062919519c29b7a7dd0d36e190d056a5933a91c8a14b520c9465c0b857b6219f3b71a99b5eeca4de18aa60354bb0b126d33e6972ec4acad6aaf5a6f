{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { concatPagination } from \"@apollo/client/utilities\";\nimport merge from \"deepmerge\";\nimport isEqual from \"lodash/isEqual\";\nimport { ApolloLink } from \"apollo-link\";\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\nlet apolloClient;\nlet wordpressEndpoint = 'http://localhost:8080/graphql'; // // If we're running on Docker, use the WordPress container hostname instead of localhost.\n// if (process.env.HOME === '/home/node') {\n//   wordpressEndpoint = 'http://wp-headless:8080/graphql';\n// }\n\nconst internalAPI = createHttpLink({\n  uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`,\n  credentials: \"same-origin\"\n});\nconst wordPressAPI = createHttpLink({\n  // uri: \"http://wp-headless:8080/graphql\",\n  uri: wordpressEndpoint\n});\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    // link: new HttpLink({\n    //   uri: `http://wordpress:80/graphql`, // Server URL (must be absolute)\n    //   // credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n    // }),\n    link: ApolloLink.split(operation => operation.getContext().clientName === \"wordPress\", wordPressAPI, internalAPI),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [...sourceArray, ...destinationArray.filter(d => sourceArray.every(s => !isEqual(d, s)))]\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps !== null && pageProps !== void 0 && pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}