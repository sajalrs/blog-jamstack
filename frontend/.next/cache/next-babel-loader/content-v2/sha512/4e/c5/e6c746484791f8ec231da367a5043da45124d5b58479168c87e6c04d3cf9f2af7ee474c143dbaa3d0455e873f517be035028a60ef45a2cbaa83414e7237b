{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/node/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/node/app/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery {\\n    posts {\\n      nodes {\\n        date\\n        featuredImage {\\n          title\\n          sourceUrl\\n        }\\n        title\\n        author {\\n          id\\n        }\\n        id\\n        excerpt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport var __N_SSP = true;\nexport var POSTS_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useQuery = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  var posts;\n\n  if (loading && !loadingArticle) {\n    posts = [];\n  } else {\n    posts = data.posts.nodes;\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, posts.map(function (item) {\n    return __jsx(MediaCard, {\n      title: item.title,\n      description: item.excerpt || \"\",\n      imgTitle: item.title,\n      imgURL: item.featuredImage.sourceUrl || \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: \"posts/\".concat(item.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    });\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/about\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"About\"))));\n};\n\n_s(IndexPage, \"WmGm+hF3wSQyzYbyfPYfQTu+VqY=\", false, function () {\n  return [useQuery];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Link","Layout","gql","useQuery","NetworkStatus","MediaCard","POSTS_QUERY","IndexPage","context","clientName","notifyOnNetworkStatusChange","loading","data","networkStatus","loadingArticle","fetchMore","posts","nodes","map","item","title","excerpt","featuredImage","sourceUrl","id"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AACA,OAAO,IAAMC,WAAW,GAAGJ,GAAH,mBAAjB;;AAoBP,IAAMK,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACmBJ,QAAQ,CAACG,WAAD,EAAc;AAC7DE,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADoD;AAE7DC,IAAAA,2BAA2B,EAAE;AAFgC,GAAd,CAD3B;AAAA,MACdC,OADc,aACdA,OADc;AAAA,MACLC,IADK,aACLA,IADK;AAAA,MACCC,aADD,aACCA,aADD;;AAMtB,MAAMC,cAAc,GAAGD,aAAa,KAAKT,aAAa,CAACW,SAAvD;AAEA,MAAIC,KAAJ;;AACA,MAAIL,OAAO,IAAI,CAACG,cAAhB,EAAgC;AAC9BE,IAAAA,KAAK,GAAG,EAAR;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWC,KAAnB;AACD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,WACT,MAAC,SAAD;AACE,MAAA,KAAK,EAAEA,IAAI,CAACC,KADd;AAEE,MAAA,WAAW,EACTD,IAAI,CAACE,OAAL,IACA,EAJJ;AAME,MAAA,QAAQ,EAAEF,IAAI,CAACC,KANjB;AAOE,MAAA,MAAM,EACJD,IAAI,CAACG,aAAL,CAAmBC,SAAnB,IACA,qBATJ;AAWE,MAAA,SAAS,EAAE,GAXb;AAYE,MAAA,SAAS,EAAE,GAZb;AAaE,MAAA,IAAI,kBAAWJ,IAAI,CAACK,EAAhB,CAbN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CADH,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CAlBF,CADF;AA0BD,CAzCD;;GAAMjB,S;UACqCJ,Q;;;KADrCI,S;AAwDN,eAAeA,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        date\n        featuredImage {\n          title\n          sourceUrl\n        }\n        title\n        author {\n          id\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  let posts;\n  if (loading && !loadingArticle) {\n    posts = [];\n  } else {\n    posts = data.posts.nodes;\n  }\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      {posts.map((item: any) => (\n        <MediaCard\n          title={item.title}\n          description={\n            item.excerpt ||\n            \"\"\n          }\n          imgTitle={item.title}\n          imgURL={\n            item.featuredImage.sourceUrl ||\n            \"image_not_found.png\"\n          }\n          cardWidth={345}\n          imgHeight={140}\n          link={`posts/${item.id}`}\n        />\n      ))}\n      <p>\n        <Link href=\"/about\">\n          <a>About</a>\n        </Link>\n      </p>\n    </Layout>\n  );\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}