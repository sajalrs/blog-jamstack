{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/index.tsx\",\n    _this = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport PostsList from \"../components/PostsList\";\n\nvar IndexPage = function IndexPage(_ref) {\n  var posts = _ref.posts,\n      errors = _ref.errors,\n      numOfPages = _ref.numOfPages;\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(PostsList, {\n    posts: posts,\n    pageNumber: 1,\n    numOfPages: numOfPages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = IndexPage;\nexport var __N_SSG = true;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Layout","PostsList","IndexPage","posts","errors","numOfPages","color"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAMA,OAAOC,SAAP,MAAsB,yBAAtB;;AAaA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA0C;AAAA,MAAvCC,KAAuC,QAAvCA,KAAuC;AAAA,MAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,UAAwB,QAAxBA,UAAwB;;AAC1D,MAAID,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDF,MADhD,CADF,CADF;AAOD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAED,KAAlB;AAA0B,IAAA,UAAU,EAAE,CAAtC;AAAyC,IAAA,UAAU,EAAEE,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA4BD,CAvCD;;KAAMH,S;;AAyCN,eAAeA,SAAf","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport MediaCard from \"../components/Card\";\nimport { GetStaticProps } from \"next\";\nimport PageNav from \"../components/PageNav\";\nimport { Post } from \"../interfaces\";\nimport PostsList from \"../components/PostsList\"\nimport {\n  CURSORS_QUERY,\n  POSTS_QUERY,\n  ITEMS_PER_PAGE,\n} from \"./[page]\";\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n};\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <PostsList posts={posts!} pageNumber={1} numOfPages={numOfPages}/>\n      {/* <div className=\"flex flex-col items-center\">\n        {posts!.map((post: Post, index: number) => {\n          return (\n            <div className=\"m-4\">\n              <MediaCard\n                key={index}\n                title={post.title}\n                description={post.excerpt || \"\"}\n                imgTitle={post.title}\n                imgURL={\n                  post.featuredImage\n                    ? post.featuredImage.sourceUrl\n                    : \"image_not_found.png\"\n                }\n                cardWidth={345}\n                imgHeight={140}\n                link={`posts/${post.slug}`}\n              />\n            </div>\n          );\n        })}\n          <PageNav pageNumber={1} numOfPages={numOfPages}/>\n      </div> */}\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}