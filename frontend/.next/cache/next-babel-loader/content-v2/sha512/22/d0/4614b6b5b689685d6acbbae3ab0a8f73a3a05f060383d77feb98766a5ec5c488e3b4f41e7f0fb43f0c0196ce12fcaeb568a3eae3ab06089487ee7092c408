{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/[uri].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { addApolloState, initializeApollo } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MENU_QUERY } from \"../components/Navbar\";\nconst PAGES_QUERY = gql`\n  query PagesQuery($uri: String!) {\n    pageBy(uri: $uri) {\n      title\n      content\n    }\n  }\n`;\nexport const PAGES_SLUG_QUERY = gql`\n  query pagesQuery($first: Int, $last: Int, $after: String, $before: String) {\n    pages(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          uri\n        }\n      }\n    }\n  }\n`;\n\nconst Page = ({\n  page,\n  errors,\n  menuListItems\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      menuListItems: menuListItems,\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    menuListItems: menuListItems,\n    title: `${page ? page.title : \"User Detail\"} | Next.js + TypeScript Example`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: `flex justify-center items-center max-w-full`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"m-4 max-w-4xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, page === null || page === void 0 ? void 0 : page.title), __jsx(\"div\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: page === null || page === void 0 ? void 0 : page.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Page;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const apolloClient = initializeApollo();\n  let paths = [];\n  let hasNextPage;\n  let nextCursor = null;\n\n  do {\n    const {\n      data\n    } = await apolloClient.query({\n      query: PAGES_SLUG_QUERY,\n      variables: {\n        first: 10,\n        last: null,\n        after: nextCursor,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    paths.push(...data.pages.edges.map(edge => {\n      const slashedUri = edge.node.uri.toString();\n      return {\n        params: {\n          uri: slashedUri.slice(1, slashedUri.length - 1)\n        }\n      };\n    }));\n    hasNextPage = data.pages.pageInfo.hasNextPage;\n    nextCursor = data.pages.pageInfo.endCursor;\n  } while (hasNextPage); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n\n  console.log(paths); // paths.push({params: {uri: 'about'}});\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const uri = params === null || params === void 0 ? void 0 : params.uri;\n    const apolloClient = initializeApollo();\n    const {\n      data\n    } = await apolloClient.query({\n      query: PAGES_QUERY,\n      variables: {\n        uri\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    const menuListItems = await apolloClient.query({\n      query: MENU_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => res.data.menuItems.nodes.map(node => ({\n      title: node.label,\n      pageURL: node.url\n    }))); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return addApolloState(apolloClient, {\n      props: {\n        page: data.pageBy,\n        menuListItems\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/[uri].tsx"],"names":["Layout","addApolloState","initializeApollo","gql","Typography","MENU_QUERY","PAGES_QUERY","PAGES_SLUG_QUERY","Page","page","errors","menuListItems","color","title","__html","content","getStaticPaths","apolloClient","paths","hasNextPage","nextCursor","data","query","variables","first","last","after","before","context","clientName","push","pages","edges","map","edge","slashedUri","node","uri","toString","params","slice","length","pageInfo","endCursor","console","log","fallback","getStaticProps","then","res","menuItems","nodes","label","pageURL","url","props","pageBy","err","message"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,qBAAjD;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAAyC,sBAAzC;AAEA,MAAMC,WAAW,GAAGH,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,OAAO,MAAMI,gBAAgB,GAAGJ,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;;AA+BP,MAAMK,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAD,KAA4C;AACvD,MAAID,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AACE,MAAA,aAAa,EAAEC,aADjB;AAEE,MAAA,KAAK,EAAC,sCAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDF,MADhD,CAJF,CADF;AAUD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAEC,aADjB;AAEE,IAAA,KAAK,EAAG,GACNF,IAAI,GAAGA,IAAI,CAACI,KAAR,GAAgB,aACrB,iCAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAK,IAAA,SAAS,EAAG,6CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,YAAY,MAAxB;AAAyB,IAAA,OAAO,EAAC,IAAjC;AAAsC,IAAA,SAAS,EAAC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,IADH,aACGA,IADH,uBACGA,IAAI,CAAEI,KADT,CADF,EAIE;AACE;AACA,IAAA,uBAAuB,EAAE;AACvBC,MAAAA,MAAM,EAAEL,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM;AADS,KAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CANF,CADF;AAsBD,CApCD;;AAsCA,eAAeP,IAAf;AAEA,OAAO,MAAMQ,cAA8B,GAAG,YAAY;AACxD;AAEA,QAAMC,YAAY,GAAGf,gBAAgB,EAArC;AACA,MAAIgB,KAAK,GAAG,EAAZ;AACA,MAAIC,WAAJ;AACA,MAAIC,UAAU,GAAG,IAAjB;;AACA,KAAG;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAgB,MAAMJ,YAAY,CAACK,KAAb,CAAmB;AAC7CA,MAAAA,KAAK,EAAEf,gBADsC;AAE7CgB,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,EADE;AAETC,QAAAA,IAAI,EAAE,IAFG;AAGTC,QAAAA,KAAK,EAAEN,UAHE;AAITO,QAAAA,MAAM,EAAE;AAJC,OAFkC;AAQ7CC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd;AARoC,KAAnB,CAA5B;AAUAX,IAAAA,KAAK,CAACY,IAAN,CACE,GAAGT,IAAI,CAACU,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAsBC,IAAD,IAAe;AACrC,YAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAcC,QAAd,EAAnB;AACA,aAAO;AACPC,QAAAA,MAAM,EAAE;AAAEF,UAAAA,GAAG,EAAEF,UAAU,CAACK,KAAX,CAAiB,CAAjB,EAAoBL,UAAU,CAACM,MAAX,GAAmB,CAAvC;AAAP;AADD,OAAP;AAEA,KAJC,CADL;AAOAtB,IAAAA,WAAW,GAAGE,IAAI,CAACU,KAAL,CAAWW,QAAX,CAAoBvB,WAAlC;AACAC,IAAAA,UAAU,GAAGC,IAAI,CAACU,KAAL,CAAWW,QAAX,CAAoBC,SAAjC;AACD,GApBD,QAoBSxB,WApBT,EAPwD,CA4BxD;AACA;;;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAZ,EA9BwD,CA+BxD;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAAS4B,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CAjCM,C,CAmCP;AACA;AACA;;AACA,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAER,EAAAA;AAAF,CAAP,KAAsB;AAClE,MAAI;AACF,UAAMF,GAAG,GAAGE,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEF,GAApB;AAEA,UAAMpB,YAAY,GAAGf,gBAAgB,EAArC;AAEA,UAAM;AAAEmB,MAAAA;AAAF,QAAW,MAAMJ,YAAY,CAACK,KAAb,CAAmB;AACxCA,MAAAA,KAAK,EAAEhB,WADiC;AAExCiB,MAAAA,SAAS,EAAE;AAAEc,QAAAA;AAAF,OAF6B;AAGxCT,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd;AAH+B,KAAnB,CAAvB;AAMA,UAAMlB,aAAa,GAAG,MAAMM,YAAY,CACrCK,KADyB,CACnB;AACLA,MAAAA,KAAK,EAAEjB,UADF;AAELuB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd;AAFJ,KADmB,EAKzBmB,IALyB,CAKnBC,GAAD,IACJA,GAAG,CAAC5B,IAAJ,CAAS6B,SAAT,CAAmBC,KAAnB,CAAyBlB,GAAzB,CACGG,IAAD,KAA2C;AACzCvB,MAAAA,KAAK,EAAEuB,IAAI,CAACgB,KAD6B;AAEzCC,MAAAA,OAAO,EAAEjB,IAAI,CAACkB;AAF2B,KAA3C,CADF,CANwB,CAA5B,CAXE,CAyBF;AACA;;AACA,WAAOrD,cAAc,CAACgB,YAAD,EAAe;AAClCsC,MAAAA,KAAK,EAAE;AAAE9C,QAAAA,IAAI,EAAEY,IAAI,CAACmC,MAAb;AAAqB7C,QAAAA;AAArB;AAD2B,KAAf,CAArB;AAGD,GA9BD,CA8BE,OAAO8C,GAAP,EAAY;AACZ,WAAO;AAAEF,MAAAA,KAAK,EAAE;AAAE7C,QAAAA,MAAM,EAAE+C,GAAG,CAACC;AAAd;AAAT,KAAP;AACD;AACF,CAlCM","sourcesContent":["import Layout from \"../components/Layout\";\nimport { addApolloState, initializeApollo } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MENU_QUERY, MenuListItem } from \"../components/Navbar\";\n\nconst PAGES_QUERY = gql`\n  query PagesQuery($uri: String!) {\n    pageBy(uri: $uri) {\n      title\n      content\n    }\n  }\n`;\n\nexport const PAGES_SLUG_QUERY = gql`\n  query pagesQuery($first: Int, $last: Int, $after: String, $before: String) {\n    pages(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          uri\n        }\n      }\n    }\n  }\n`;\n\ntype Page = {\n  __typename: string;\n  title: string;\n  content: string;\n};\n\ntype Props = {\n  page?: Page;\n  errors?: string;\n  menuListItems: MenuListItem[];\n};\n\nconst Page = ({ page, errors, menuListItems }: Props) => {\n  if (errors) {\n    return (\n      <Layout\n        menuListItems={menuListItems}\n        title=\"Error | Next.js + TypeScript Example\"\n      >\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      menuListItems={menuListItems}\n      title={`${\n        page ? page.title : \"User Detail\"\n      } | Next.js + TypeScript Example`}\n    >\n      <div className={`flex justify-center items-center max-w-full`}>\n        <div className=\"m-4 max-w-4xl\">\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {page?.title}\n          </Typography>\n          <div\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: page?.content!!,\n            }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Page;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n\n  const apolloClient = initializeApollo();\n  let paths = [];\n  let hasNextPage;\n  let nextCursor = null;\n  do {\n    const { data }: any = await apolloClient.query({\n      query: PAGES_SLUG_QUERY,\n      variables: {\n        first: 10,\n        last: null,\n        after: nextCursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n    paths.push(\n      ...data.pages.edges.map((edge: any) => {\n        const slashedUri = edge.node.uri.toString();  \n        return {\n        params: { uri: slashedUri.slice(1, slashedUri.length -1)},\n      }})\n    );\n    hasNextPage = data.pages.pageInfo.hasNextPage;\n    nextCursor = data.pages.pageInfo.endCursor;\n  } while (hasNextPage);\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  console.log(paths);\n  // paths.push({params: {uri: 'about'}});\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const uri = params?.uri;\n\n    const apolloClient = initializeApollo();\n\n    const { data } = await apolloClient.query({\n      query: PAGES_QUERY,\n      variables: { uri },\n      context: { clientName: \"wordPress\" },\n    });\n    \n    const menuListItems = await apolloClient\n      .query({\n        query: MENU_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>\n        res.data.menuItems.nodes.map(\n          (node: { label: string; url: string }) => ({\n            title: node.label,\n            pageURL: node.url,\n          })\n        )\n      );\n\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return addApolloState(apolloClient, {\n      props: { page: data.pageBy, menuListItems },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}