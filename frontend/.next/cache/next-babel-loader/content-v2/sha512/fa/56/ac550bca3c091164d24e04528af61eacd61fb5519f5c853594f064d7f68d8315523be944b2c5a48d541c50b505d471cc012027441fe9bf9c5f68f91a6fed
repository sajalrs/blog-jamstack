{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        date\n        featuredImage {\n          title\n          sourceUrl\n        }\n        title\n        author {\n          id\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const {\n    loading,\n    data,\n    networkStatus\n  } = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  if (loading && !loadingArticle) {\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, __jsx(MediaCard, {\n      title: \"Loading...\",\n      description: \"Loading...\",\n      imgTitle: \"Loading\",\n      imgURL: \"loading.gif\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }), \"))\");\n  } else {\n    const posts = data.posts.nodes;\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, posts.map(item => __jsx(MediaCard, {\n      title: item.title,\n      description: item.excerpt || \"\",\n      imgTitle: item.title,\n      imgURL: item.featuredImage.sourceUrl || \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `posts/${item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    })), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/about\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"About\"))));\n  }\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  return addApolloState(apolloClient, {\n    props: {}\n  });\n}\nexport default IndexPage;","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Link","Layout","initializeApollo","addApolloState","gql","useQuery","NetworkStatus","MediaCard","POSTS_QUERY","IndexPage","loading","data","networkStatus","context","clientName","notifyOnNetworkStatusChange","loadingArticle","fetchMore","posts","nodes","map","item","title","excerpt","featuredImage","sourceUrl","id","getServerSideProps","apolloClient","query","props"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,qBAAjD;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,MAAMC,WAAW,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;;AAoBP,MAAMK,SAAS,GAAG,MAAM;AACtB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAAmCP,QAAQ,CAACG,WAAD,EAAc;AAC7DK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADoD;AAE7DC,IAAAA,2BAA2B,EAAE;AAFgC,GAAd,CAAjD;AAKA,QAAMC,cAAc,GAAGJ,aAAa,KAAKN,aAAa,CAACW,SAAvD;;AAGA,MAAIP,OAAO,IAAI,CAACM,cAAhB,EAAgC;AAC9B,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,MAAC,SAAD;AACE,MAAA,KAAK,EAAE,YADT;AAEE,MAAA,WAAW,EACT,YAHJ;AAKE,MAAA,QAAQ,EAAE,SALZ;AAME,MAAA,MAAM,EACJ,aAPJ;AASE,MAAA,SAAS,EAAE,GATb;AAUE,MAAA,SAAS,EAAE,GAVb;AAWE,MAAA,IAAI,EAAG,GAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,OADF;AAmBD,GApBD,MAoBO;AACL,UAAME,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAWC,KAAzB;AACA,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IACT,MAAC,SAAD;AACE,MAAA,KAAK,EAAEA,IAAI,CAACC,KADd;AAEE,MAAA,WAAW,EACTD,IAAI,CAACE,OAAL,IACA,EAJJ;AAME,MAAA,QAAQ,EAAEF,IAAI,CAACC,KANjB;AAOE,MAAA,MAAM,EACJD,IAAI,CAACG,aAAL,CAAmBC,SAAnB,IACA,qBATJ;AAWE,MAAA,SAAS,EAAE,GAXb;AAYE,MAAA,SAAS,EAAE,GAZb;AAaE,MAAA,IAAI,EAAG,SAAQJ,IAAI,CAACK,EAAG,EAbzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,CAlBF,CADF;AA0BD;AAGF,CA5DD;;AA8DA,OAAO,eAAeC,kBAAf,GAAoC;AACzC,QAAMC,YAAY,GAAG1B,gBAAgB,EAArC;AAEA,QAAM0B,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAErB,WADgB;AAEvBK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AAFc,GAAnB,CAAN;AAKA,SAAOX,cAAc,CAACyB,YAAD,EAAe;AAClCE,IAAAA,KAAK,EAAE;AAD2B,GAAf,CAArB;AAGD;AAED,eAAerB,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        date\n        featuredImage {\n          title\n          sourceUrl\n        }\n        title\n        author {\n          id\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  \n  if (loading && !loadingArticle) {\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        \n          <MediaCard\n            title={\"Loading...\"}\n            description={\n              \"Loading...\"\n            }\n            imgTitle={\"Loading\"}\n            imgURL={\n              \"loading.gif\"\n            }\n            cardWidth={345}\n            imgHeight={140}\n            link={`/`}\n          />\n        ))\n      </Layout>\n    );\n  } else {\n    const posts = data.posts.nodes;\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        {posts.map((item: any) => (\n          <MediaCard\n            title={item.title}\n            description={\n              item.excerpt ||\n              \"\"\n            }\n            imgTitle={item.title}\n            imgURL={\n              item.featuredImage.sourceUrl ||\n              \"image_not_found.png\"\n            }\n            cardWidth={345}\n            imgHeight={140}\n            link={`posts/${item.id}`}\n          />\n        ))}\n        <p>\n          <Link href=\"/about\">\n            <a>About</a>\n          </Link>\n        </p>\n      </Layout>\n    );\n  }\n\n \n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}