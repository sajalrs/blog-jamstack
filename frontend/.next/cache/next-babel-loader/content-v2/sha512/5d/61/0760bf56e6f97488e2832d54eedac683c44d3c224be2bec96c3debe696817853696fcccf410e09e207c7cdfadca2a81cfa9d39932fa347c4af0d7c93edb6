{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { useRouter } from \"next/router\";\nimport { NUM_OF_NAV_PAGES } from \"./[page]\";\n\nvar IndexPage = function IndexPage(_ref) {\n  _s();\n\n  var posts = _ref.posts,\n      errors = _ref.errors,\n      numOfPages = _ref.numOfPages;\n  var router = useRouter();\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  var navigablePages = [];\n  navigablePages.push(__jsx(IconButton, {\n    size: \"small\",\n    disabled: true,\n    onClick: function onClick() {\n      router.push(\"/\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, 1));\n\n  var _loop = function _loop(i) {\n    navigablePages.push(__jsx(IconButton, {\n      onClick: function onClick() {\n        router.push(\"/\".concat(i));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, i));\n  };\n\n  for (var i = 2; i <= Math.min(NUM_OF_NAV_PAGES, numOfPages); i++) {\n    _loop(i);\n  }\n\n  if (numOfPages > NUM_OF_NAV_PAGES) {\n    navigablePages.push(__jsx(IconButton, {\n      onClick: function onClick() {\n        router.push(\"/\".concat(NUM_OF_NAV_PAGES + 1));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, \"...\"));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"flex flex-col items-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, posts.map(function (post, index) {\n    return __jsx(\"div\", {\n      className: \"m-4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, __jsx(MediaCard, {\n      key: index,\n      title: post.title,\n      description: post.excerpt || \"\",\n      imgTitle: post.title,\n      imgURL: post.featuredImage ? post.featuredImage.sourceUrl : \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: \"posts/\".concat(post.slug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }));\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, navigablePages, __jsx(IconButton, {\n    onClick: function onClick() {\n      router.push(\"/\".concat(2));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, __jsx(NavigateNextIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s(IndexPage, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = IndexPage;\nexport var __N_SSG = true;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Layout","MediaCard","IconButton","NavigateNextIcon","useRouter","NUM_OF_NAV_PAGES","IndexPage","posts","errors","numOfPages","router","color","navigablePages","push","i","Math","min","map","post","index","title","excerpt","featuredImage","sourceUrl","slug"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\n\nimport {\n  CURSORS_QUERY,\n  POSTS_QUERY,\n  ITEMS_PER_PAGE,\n  NUM_OF_NAV_PAGES,\n  Post,\n} from \"./[page]\";\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n};\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  const router = useRouter();\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  let navigablePages = [];\n  navigablePages.push(\n    <IconButton\n    size=\"small\"\n    disabled\n      onClick={() => {\n        router.push(`/`);\n      }}\n    >\n      {1}\n    </IconButton>\n  );\n  for (let i = 2; i <= Math.min(NUM_OF_NAV_PAGES, numOfPages); i++) {\n    navigablePages.push(\n      <IconButton\n        onClick={() => {\n          router.push(`/${i}`);\n        }}\n      >\n        {i}\n      </IconButton>\n    );\n  }\n\n  if(numOfPages > NUM_OF_NAV_PAGES){\n    navigablePages.push(\n      <IconButton\n        onClick={() => {\n          router.push(`/${NUM_OF_NAV_PAGES + 1}`);\n        }}\n      >\n        {\"...\"}\n      </IconButton>\n    );\n  }\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <div className=\"flex flex-col items-center\">\n        {posts!.map((post: Post, index: number) => {\n          return (\n            <div className=\"m-4\">\n              <MediaCard\n                key={index}\n                title={post.title}\n                description={post.excerpt || \"\"}\n                imgTitle={post.title}\n                imgURL={\n                  post.featuredImage\n                    ? post.featuredImage.sourceUrl\n                    : \"image_not_found.png\"\n                }\n                cardWidth={345}\n                imgHeight={140}\n                link={`posts/${post.slug}`}\n              />\n            </div>\n          );\n        })}\n        <div>\n          {navigablePages}\n\n          <IconButton\n            onClick={() => {\n              router.push(`/${2}`);\n            }}\n          >\n            <NavigateNextIcon />\n          </IconButton>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}