{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/[page].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { useRouter } from \"next/router\";\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n// export const ID_QUERY = gql`\n//   query IDQuery {\n//     posts {\n//       edges {\n//         node {\n//           id\n//         }\n//       }\n//     }\n//   }\n// `;\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\nconst ITEMS_PER_PAGE = 3;\n\nconst updateQuery = (previousResult, {\n  fetchMoreResult\n}) => {\n  return fetchMoreResult.posts.edges.length ? fetchMoreResult : previousResult;\n};\n\nconst IndexPage = ({\n  posts,\n  errors,\n  numOfPages\n}) => {\n  var _parseInt;\n\n  const router = useRouter();\n  const pageNumber = (_parseInt = parseInt(router.query.page.toString())) !== null && _parseInt !== void 0 ? _parseInt : 1;\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"flex flex-col items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, posts.map((post, index) => {\n    return __jsx(\"div\", {\n      className: \"m-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, __jsx(MediaCard, {\n      key: index,\n      title: post.title,\n      description: post.excerpt || \"\",\n      imgTitle: post.title,\n      imgURL: post.featuredImage ? post.featuredImage.sourceUrl : \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `posts/${post.slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }));\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, pageNumber !== 1 ? __jsx(IconButton, {\n    onClick: () => {\n      router.push(`/${pageNumber - 1}`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, __jsx(NavigateBeforeIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  })) : null, pageNumber !== numOfPages ? __jsx(IconButton, {\n    onClick: () => {\n      router.push(`/${pageNumber - 1}`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, __jsx(NavigateNextIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  })) : null)));\n};\n\nexport default IndexPage;\nexport const getStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n  const {\n    data\n  } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n\n  for (let i = 0; i < numOfPages; i++) {\n    paths.push({\n      params: {\n        page: i.toString()\n      }\n    });\n  }\n\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const page = parseInt(params === null || params === void 0 ? void 0 : params.page);\n    const apolloClient = initializeApollo();\n    const cursors = await apolloClient.query({\n      query: CURSORS_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => res.data.posts.edges.filter((_, index) => index % ITEMS_PER_PAGE === 0));\n    const {\n      data\n    } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page - 1].cursor,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map(edge => edge.node),\n        numOfPages: cursors.length\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/[page].tsx"],"names":["Layout","initializeApollo","addApolloState","gql","MediaCard","IconButton","NavigateBeforeIcon","NavigateNextIcon","useRouter","POSTS_QUERY","CURSORS_QUERY","ITEMS_PER_PAGE","updateQuery","previousResult","fetchMoreResult","posts","edges","length","IndexPage","errors","numOfPages","router","pageNumber","parseInt","query","page","toString","color","map","post","index","title","excerpt","featuredImage","sourceUrl","slug","push","getStaticPaths","apolloClient","data","context","clientName","paths","Math","ceil","i","params","fallback","getStaticProps","cursors","then","res","filter","_","variables","first","last","after","cursor","before","props","edge","node","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport { FetchResult } from \"apollo-link\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          date\n          featuredImage {\n            title\n            sourceUrl\n          }\n          title\n          author {\n            id\n          }\n          id\n          slug\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\ntype Post = {\n  date: string;\n  featuredImage: {\n    title: string;\n    sourceUrl: string;\n  };\n  title: string;\n  author: {\n    id: string;\n  };\n  id: string;\n  slug: string;\n  excerpt: string;\n};\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages?: number;\n};\n\n// export const ID_QUERY = gql`\n//   query IDQuery {\n//     posts {\n//       edges {\n//         node {\n//           id\n//         }\n//       }\n//     }\n//   }\n// `;\n\nexport const CURSORS_QUERY = gql`\n  query IDQuery {\n    posts {\n      edges {\n        cursor\n      }\n    }\n  }\n`;\n\nconst ITEMS_PER_PAGE = 3;\n\nconst updateQuery = (\n  previousResult: FetchResult,\n  { fetchMoreResult }: { fetchMoreResult?: any }\n) => {\n  return fetchMoreResult.posts.edges.length ? fetchMoreResult : previousResult;\n};\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  const router = useRouter();\n  const pageNumber = parseInt(router.query.page.toString()) ?? 1;\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <div className=\"flex flex-col items-center\">\n        {posts!.map((post: Post, index: number) => {\n          return (\n            <div className=\"m-4\">\n              <MediaCard\n                key={index}\n                title={post.title}\n                description={post.excerpt || \"\"}\n                imgTitle={post.title}\n                imgURL={\n                  post.featuredImage\n                    ? post.featuredImage.sourceUrl\n                    : \"image_not_found.png\"\n                }\n                cardWidth={345}\n                imgHeight={140}\n                link={`posts/${post.slug}`}\n              />\n            </div>\n          );\n        })}\n        <div>\n          {pageNumber !== 1 ? (\n            <IconButton\n              onClick={() => {\n                router.push(`/${pageNumber - 1}`);\n              }}\n            >\n              <NavigateBeforeIcon />\n            </IconButton>\n          ) : null}\n\n          {pageNumber !== numOfPages ? (\n            <IconButton\n              onClick={() => {\n                router.push(`/${pageNumber - 1}`);\n              }}\n            >\n              <NavigateNextIcon />\n            </IconButton>\n          ) : null}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const apolloClient = initializeApollo();\n\n  const { data } = await apolloClient.query({\n    query: CURSORS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n  let paths = [];\n  const numOfPages = Math.ceil(data.posts.edges.length / ITEMS_PER_PAGE);\n  for (let i = 0; i < numOfPages; i++) {\n    paths.push({ params: { page: i.toString() } });\n  }\n\n  return { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const page = parseInt(params?.page! as string);\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>\n        res.data.posts.edges.filter(\n          (_: string, index: number) => index % ITEMS_PER_PAGE === 0\n        )\n      );\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: cursors[page-1].cursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n\n    return addApolloState(apolloClient, {\n      props: { posts: data.posts.edges.map((edge: {node: Post}) => edge.node), numOfPages: cursors.length },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}