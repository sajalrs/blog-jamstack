{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport MediaCard from \"../components/Card\";\nimport PageNav from \"../components/PageNav\";\nimport { CURSORS_QUERY, POSTS_QUERY, ITEMS_PER_PAGE } from \"./[page]\";\n\nconst IndexPage = ({\n  posts,\n  errors,\n  numOfPages\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"flex flex-col items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, posts.map((post, index) => {\n    return __jsx(\"div\", {\n      className: \"m-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, __jsx(MediaCard, {\n      key: index,\n      title: post.title,\n      description: post.excerpt || \"\",\n      imgTitle: post.title,\n      imgURL: post.featuredImage ? post.featuredImage.sourceUrl : \"image_not_found.png\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: `posts/${post.slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }));\n  }), __jsx(PageNav, {\n    pageNumber: 1,\n    numOfPages: numOfPages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default IndexPage;\nexport const getStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n    const cursors = await apolloClient.query({\n      query: CURSORS_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => [res.data.posts.edges[0], ...res.data.posts.edges.filter((_, index) => (index + 1) % ITEMS_PER_PAGE === 0)]);\n    const {\n      data\n    } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map(edge => edge.node),\n        numOfPages: cursors.length\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Layout","initializeApollo","addApolloState","MediaCard","PageNav","CURSORS_QUERY","POSTS_QUERY","ITEMS_PER_PAGE","IndexPage","posts","errors","numOfPages","color","map","post","index","title","excerpt","featuredImage","sourceUrl","slug","getStaticProps","apolloClient","cursors","query","context","clientName","then","res","data","edges","filter","_","variables","first","last","after","before","props","edge","node","length","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport MediaCard from \"../components/Card\";\nimport { GetStaticProps } from \"next\";\nimport PageNav from \"../components/PageNav\";\nimport { Post } from \"../interfaces\";\nimport {\n  CURSORS_QUERY,\n  POSTS_QUERY,\n  ITEMS_PER_PAGE,\n} from \"./[page]\";\n\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n};\n\nconst IndexPage = ({ posts, errors, numOfPages }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <div className=\"flex flex-col items-center\">\n        {posts!.map((post: Post, index: number) => {\n          return (\n            <div className=\"m-4\">\n              <MediaCard\n                key={index}\n                title={post.title}\n                description={post.excerpt || \"\"}\n                imgTitle={post.title}\n                imgURL={\n                  post.featuredImage\n                    ? post.featuredImage.sourceUrl\n                    : \"image_not_found.png\"\n                }\n                cardWidth={345}\n                imgHeight={140}\n                link={`posts/${post.slug}`}\n              />\n            </div>\n          );\n        })}\n          <PageNav pageNumber={1} numOfPages={numOfPages}/>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}