{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/node/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/node/app/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery {\\n    posts {\\n      nodes {\\n        date\\n        featuredImage {\\n          title\\n          sourceUrl\\n        }\\n        title\\n        author {\\n          id\\n        }\\n        id\\n        excerpt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport var __N_SSP = true;\nexport var POSTS_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useQuery = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  if (loading && !loadingArticle) {\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, __jsx(MediaCard, {\n      title: \"Loading...\",\n      description: \"Loading...\",\n      imgTitle: \"Loading\",\n      imgURL: \"loading.gif\",\n      cardWidth: 345,\n      imgHeight: 140,\n      link: \"/\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }), \"))\");\n  } else {\n    var posts = data.posts.nodes;\n    return __jsx(Layout, {\n      title: \"Home | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, posts.map(function (item) {\n      return __jsx(MediaCard, {\n        title: item.title,\n        description: item.excerpt || \"\",\n        imgTitle: item.title,\n        imgURL: item.featuredImage.sourceUrl || \"image_not_found.png\",\n        cardWidth: 345,\n        imgHeight: 140,\n        link: \"posts/\".concat(item.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      });\n    }), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/about\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"About\"))));\n  }\n};\n\n_s(IndexPage, \"WmGm+hF3wSQyzYbyfPYfQTu+VqY=\", false, function () {\n  return [useQuery];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/node/app/pages/index.tsx"],"names":["Link","Layout","gql","useQuery","NetworkStatus","MediaCard","POSTS_QUERY","IndexPage","context","clientName","notifyOnNetworkStatusChange","loading","data","networkStatus","loadingArticle","fetchMore","posts","nodes","map","item","title","excerpt","featuredImage","sourceUrl","id"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AACA,OAAO,IAAMC,WAAW,GAAGJ,GAAH,mBAAjB;;AAoBP,IAAMK,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACmBJ,QAAQ,CAACG,WAAD,EAAc;AAC7DE,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADoD;AAE7DC,IAAAA,2BAA2B,EAAE;AAFgC,GAAd,CAD3B;AAAA,MACdC,OADc,aACdA,OADc;AAAA,MACLC,IADK,aACLA,IADK;AAAA,MACCC,aADD,aACCA,aADD;;AAMtB,MAAMC,cAAc,GAAGD,aAAa,KAAKT,aAAa,CAACW,SAAvD;;AAGA,MAAIJ,OAAO,IAAI,CAACG,cAAhB,EAAgC;AAC9B,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,MAAC,SAAD;AACE,MAAA,KAAK,EAAE,YADT;AAEE,MAAA,WAAW,EACT,YAHJ;AAKE,MAAA,QAAQ,EAAE,SALZ;AAME,MAAA,MAAM,EACJ,aAPJ;AASE,MAAA,SAAS,EAAE,GATb;AAUE,MAAA,SAAS,EAAE,GAVb;AAWE,MAAA,IAAI,KAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,OADF;AAmBD,GApBD,MAoBO;AACL,QAAME,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWC,KAAzB;AACA,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,aACT,MAAC,SAAD;AACE,QAAA,KAAK,EAAEA,IAAI,CAACC,KADd;AAEE,QAAA,WAAW,EACTD,IAAI,CAACE,OAAL,IACA,EAJJ;AAME,QAAA,QAAQ,EAAEF,IAAI,CAACC,KANjB;AAOE,QAAA,MAAM,EACJD,IAAI,CAACG,aAAL,CAAmBC,SAAnB,IACA,qBATJ;AAWE,QAAA,SAAS,EAAE,GAXb;AAYE,QAAA,SAAS,EAAE,GAZb;AAaE,QAAA,IAAI,kBAAWJ,IAAI,CAACK,EAAhB,CAbN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADS;AAAA,KAAV,CADH,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,CAlBF,CADF;AA0BD;AAGF,CA5DD;;GAAMjB,S;UACqCJ,Q;;;KADrCI,S;AA2EN,eAAeA,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport MediaCard from \"../components/Card\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        date\n        featuredImage {\n          title\n          sourceUrl\n        }\n        title\n        author {\n          id\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  \n  if (loading && !loadingArticle) {\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        \n          <MediaCard\n            title={\"Loading...\"}\n            description={\n              \"Loading...\"\n            }\n            imgTitle={\"Loading\"}\n            imgURL={\n              \"loading.gif\"\n            }\n            cardWidth={345}\n            imgHeight={140}\n            link={`/`}\n          />\n        ))\n      </Layout>\n    );\n  } else {\n    const posts = data.posts.nodes;\n    return (\n      <Layout title=\"Home | Next.js + TypeScript Example\">\n        {posts.map((item: any) => (\n          <MediaCard\n            title={item.title}\n            description={\n              item.excerpt ||\n              \"\"\n            }\n            imgTitle={item.title}\n            imgURL={\n              item.featuredImage.sourceUrl ||\n              \"image_not_found.png\"\n            }\n            cardWidth={345}\n            imgHeight={140}\n            link={`posts/${item.id}`}\n          />\n        ))}\n        <p>\n          <Link href=\"/about\">\n            <a>About</a>\n          </Link>\n        </p>\n      </Layout>\n    );\n  }\n\n \n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}