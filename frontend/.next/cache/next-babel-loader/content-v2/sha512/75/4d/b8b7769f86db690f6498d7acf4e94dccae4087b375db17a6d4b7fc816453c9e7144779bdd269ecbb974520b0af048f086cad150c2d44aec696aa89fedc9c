{"ast":null,"code":"var _jsxFileName = \"/home/node/app/pages/posts/[slug].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../components/Layout\";\nimport { addApolloState, initializeApollo } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport Typography from \"@material-ui/core/Typography\";\nimport postStyles from \"./post.module.scss\";\nconst POST_QUERY = gql`\n  query PostQuery($slug: String!) {\n    postBy(slug: $slug) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`; // export const POSTS_SLUG_QUERY = gql`\n//   query postsQuery {\n//     posts {\n//       nodes {\n//         slug\n//       }\n//     }\n//   }\n// `;\n\nexport const POSTS_SLUG_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          slug\n        }\n      }\n    }\n  }\n`;\n\nconst Post = ({\n  post,\n  errors\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: `${post ? post.title : \"User Detail\"} | Next.js + TypeScript Example`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: `${postStyles[\"post\"]} flex justify-center items-center max-w-full`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"m-4 max-w-4xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, post === null || post === void 0 ? void 0 : post.title), __jsx(\"div\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: post === null || post === void 0 ? void 0 : post.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Post;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const apolloClient = initializeApollo();\n  let paths = [];\n  let hasNextPage;\n  let nextCursor = null;\n\n  do {\n    const {\n      data\n    } = await apolloClient.query({\n      query: POSTS_SLUG_QUERY,\n      variables: {\n        first: 10,\n        last: null,\n        after: nextCursor,\n        before: null\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    });\n    paths.push(...data.posts.edges.map(edge => ({\n      params: {\n        slug: edge.node.slug.toString()\n      }\n    })));\n    hasNextPage = data.posts.pageInfo.hasNextPage;\n    nextCursor = data.posts.pageInfo.endCursor;\n  } while (hasNextPage); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const slug = params === null || params === void 0 ? void 0 : params.slug;\n    const apolloClient = initializeApollo();\n    const {\n      data\n    } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: {\n        slug\n      },\n      context: {\n        clientName: \"wordPress\"\n      }\n    }); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return addApolloState(apolloClient, {\n      props: {\n        post: data.postBy\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/node/app/pages/posts/[slug].tsx"],"names":["Layout","addApolloState","initializeApollo","gql","Typography","postStyles","POST_QUERY","POSTS_SLUG_QUERY","Post","post","errors","color","title","__html","content","getStaticPaths","apolloClient","paths","hasNextPage","nextCursor","data","query","variables","first","last","after","before","context","clientName","push","posts","edges","map","edge","params","slug","node","toString","pageInfo","endCursor","fallback","getStaticProps","props","postBy","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../../components/Layout\";\nimport { addApolloState, initializeApollo } from \"../../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Typography from \"@material-ui/core/Typography\";\nimport postStyles from \"./post.module.scss\";\n\nconst POST_QUERY = gql`\n  query PostQuery($slug: String!) {\n    postBy(slug: $slug) {\n      title\n      content\n      author {\n        nickname\n      }\n    }\n  }\n`;\n\n// export const POSTS_SLUG_QUERY = gql`\n//   query postsQuery {\n//     posts {\n//       nodes {\n//         slug\n//       }\n//     }\n//   }\n// `;\nexport const POSTS_SLUG_QUERY = gql`\n  query postsQuery($first: Int, $last: Int, $after: String, $before: String) {\n    posts(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          slug\n        }\n      }\n    }\n  }\n`;\n\ntype Post = {\n  __typename: string;\n  title: string;\n  content: string;\n  author: {\n    nickname: string;\n  };\n};\n\ntype Props = {\n  post?: Post;\n  errors?: string;\n};\n\nconst Post = ({ post, errors }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      title={`${\n        post ? post.title : \"User Detail\"\n      } | Next.js + TypeScript Example`}\n    >\n      <div\n        className={`${postStyles[\"post\"]} flex justify-center items-center max-w-full`}\n      >\n        <div className=\"m-4 max-w-4xl\">\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {post?.title}\n          </Typography>\n          <div\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: post?.content!!,\n            }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Post;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n\n  const apolloClient = initializeApollo();\n  let paths = [];\n  let hasNextPage;\n  let nextCursor = null;\n  do {\n    const { data }: any = await apolloClient.query({\n      query: POSTS_SLUG_QUERY,\n      variables: {\n        first: 10,\n        last: null,\n        after: nextCursor,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n    paths.push(\n      ...data.posts.edges.map((edge: any) => ({\n        params: { slug: edge.node.slug.toString() },\n      }))\n    );\n    hasNextPage = data.posts.pageInfo.hasNextPage;\n    nextCursor = data.posts.pageInfo.endCursor;\n   \n  } while (hasNextPage);\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const slug = params?.slug;\n\n    const apolloClient = initializeApollo();\n\n    const { data } = await apolloClient.query({\n      query: POST_QUERY,\n      variables: { slug },\n      context: { clientName: \"wordPress\" },\n    });\n\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return addApolloState(apolloClient, { props: { post: data.postBy } });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}