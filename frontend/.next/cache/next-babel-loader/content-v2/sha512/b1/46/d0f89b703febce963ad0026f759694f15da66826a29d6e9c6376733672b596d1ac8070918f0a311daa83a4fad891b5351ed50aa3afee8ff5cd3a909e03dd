{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const {\n    loading,\n    data,\n    networkStatus\n  } = useQuery(POSTS_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  let posts;\n\n  if (loading && !loadingArticle) {\n    posts = {};\n  } else {\n    posts = data.posts.nodes;\n  }\n\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Hello Next.js \\uD83D\\uDC4B\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, posts[0]), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"About\"))));\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  return addApolloState(apolloClient, {\n    props: {}\n  });\n}\nexport default IndexPage;","map":{"version":3,"sources":["/usr/src/app/pages/index.tsx"],"names":["Link","Layout","initializeApollo","addApolloState","gql","useQuery","NetworkStatus","POSTS_QUERY","IndexPage","loading","data","networkStatus","context","clientName","notifyOnNetworkStatusChange","loadingArticle","fetchMore","posts","nodes","getServerSideProps","apolloClient","query","props"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,qBAAjD;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,MAAMC,WAAW,GAAGH,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;;AAUP,MAAMI,SAAS,GAAG,MAAM;AACtB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAAmCN,QAAQ,CAACE,WAAD,EAAc;AAC7DK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADoD;AAE7DC,IAAAA,2BAA2B,EAAE;AAFgC,GAAd,CAAjD;AAKA,QAAMC,cAAc,GAAGJ,aAAa,KAAKL,aAAa,CAACU,SAAvD;AAEA,MAAIC,KAAJ;;AACA,MAAIR,OAAO,IAAI,CAACM,cAAhB,EAAgC;AAC9BE,IAAAA,KAAK,GAAG,EAAR;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAWC,KAAnB;AACD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,KAAK,CAAC,CAAD,CAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CAHF,CADF;AAWD,CA1BD;;AA4BA,OAAO,eAAeE,kBAAf,GAAoC;AACzC,QAAMC,YAAY,GAAGlB,gBAAgB,EAArC;AAEA,QAAMkB,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEd,WADgB;AAEvBK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AAFc,GAAnB,CAAN;AAKA,SAAOV,cAAc,CAACiB,YAAD,EAAe;AAClCE,IAAAA,KAAK,EAAE;AAD2B,GAAf,CAArB;AAGD;AAED,eAAed,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n    context: { clientName: \"wordPress\" },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  let posts;\n  if (loading && !loadingArticle) {\n    posts = {};\n  } else {\n    posts = data.posts.nodes;\n  }\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <h1>Hello Next.js ðŸ‘‹</h1>\n      <p>{posts[0]}</p>\n      <p>\n        <Link href=\"/about\">\n          <a>About</a>\n        </Link>\n      </p>\n    </Layout>\n  );\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}