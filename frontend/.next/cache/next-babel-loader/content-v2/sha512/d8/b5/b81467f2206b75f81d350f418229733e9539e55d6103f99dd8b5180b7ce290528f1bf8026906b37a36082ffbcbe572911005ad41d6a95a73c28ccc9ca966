{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/usr/src/app/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query postsQuery() {\\n    posts {\\n      nodes {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nexport var __N_SSP = true;\nexport var POST_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useQuery = useQuery(POST_QUERY, {\n    context: {\n      clientName: \"wordPress\"\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  var posts;\n\n  if (loading && !loadingArticle) {\n    posts = {};\n  } else {\n    posts = data.posts.nodes;\n  }\n\n  __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Hello Next.js \\uD83D\\uDC4B\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, posts[0]), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: \"/about\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"About\"))));\n};\n\n_s(IndexPage, \"WmGm+hF3wSQyzYbyfPYfQTu+VqY=\", false, function () {\n  return [useQuery];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/usr/src/app/pages/index.tsx"],"names":["Link","Layout","gql","useQuery","NetworkStatus","POST_QUERY","IndexPage","context","clientName","notifyOnNetworkStatusChange","loading","data","networkStatus","loadingArticle","fetchMore","posts","nodes"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,gBAA7C;;AAEA,OAAO,IAAMC,UAAU,GAAGH,GAAH,mBAAhB;;AAUP,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACmBH,QAAQ,CAACE,UAAD,EAAa;AAC5DE,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADmD;AAE5DC,IAAAA,2BAA2B,EAAE;AAF+B,GAAb,CAD3B;AAAA,MACdC,OADc,aACdA,OADc;AAAA,MACLC,IADK,aACLA,IADK;AAAA,MACCC,aADD,aACCA,aADD;;AAMtB,MAAMC,cAAc,GAAGD,aAAa,KAAKR,aAAa,CAACU,SAAvD;AAEA,MAAIC,KAAJ;;AACA,MAAIL,OAAO,IAAI,CAACG,cAAhB,EAAgC;AAC9BE,IAAAA,KAAK,GAAG,EAAR;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWC,KAAnB;AACD;;AAED,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,KAAK,CAAC,CAAD,CAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CAHF;AASD,CAxBD;;GAAMT,S;UACqCH,Q;;;KADrCG,S;AAuCN,eAAeA,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\n\nexport const POST_QUERY = gql`\n  query postsQuery() {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  const { loading, data, networkStatus } = useQuery(POST_QUERY, {\n    context: { clientName: \"wordPress\" },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  let posts;\n  if (loading && !loadingArticle) {\n    posts = {};\n  } else {\n    posts = data.posts.nodes;\n  }\n\n  <Layout title=\"Home | Next.js + TypeScript Example\">\n    <h1>Hello Next.js ðŸ‘‹</h1>\n    <p>{posts[0]}</p>\n    <p>\n      <Link href=\"/about\">\n        <a>About</a>\n      </Link>\n    </p>\n  </Layout>;\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POST_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}