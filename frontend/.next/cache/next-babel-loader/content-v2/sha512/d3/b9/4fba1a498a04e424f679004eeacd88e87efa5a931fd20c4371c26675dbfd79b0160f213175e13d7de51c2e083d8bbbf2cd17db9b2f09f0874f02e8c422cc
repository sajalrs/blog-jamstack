{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql } from \"@apollo/client\";\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  // const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n  //   context: { clientName: \"wordPress\" },\n  //   notifyOnNetworkStatusChange: true,\n  // });\n  // const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  // let posts;\n  // if (loading && !loadingArticle) {\n  //   posts = [];\n  // } else {\n  //   posts = data.posts.nodes;\n  // }\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Hello Next.js \\uD83D\\uDC4B\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"About\"))));\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: {\n      clientName: \"wordPress\"\n    }\n  });\n  fetch('http://worpress:80/graphql').then(response => response.json()).then(data => console.log(data));\n  return addApolloState(apolloClient, {\n    props: {}\n  });\n}\nexport default IndexPage;","map":{"version":3,"sources":["/usr/src/app/pages/index.tsx"],"names":["Link","Layout","initializeApollo","addApolloState","gql","POSTS_QUERY","IndexPage","getServerSideProps","apolloClient","query","context","clientName","fetch","then","response","json","data","console","log","props"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,qBAAjD;AACA,SAASC,GAAT,QAA6C,gBAA7C;AAEA,OAAO,MAAMC,WAAW,GAAGD,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;;AAUP,MAAME,SAAS,GAAG,MAAM;AACtB;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,qCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CAHF,CADF;AAWD,CA1BD;;AA4BA,OAAO,eAAeC,kBAAf,GAAoC;AACzC,QAAMC,YAAY,GAAGN,gBAAgB,EAArC;AAEA,QAAMM,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEJ,WADgB;AAEvBK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd;AAFc,GAAnB,CAAN;AAKAC,EAAAA,KAAK,CAAC,4BAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAFd;AAIA,SAAOb,cAAc,CAACK,YAAD,EAAe;AAClCW,IAAAA,KAAK,EAAE;AAD2B,GAAf,CAArB;AAGD;AAED,eAAeb,SAAf","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\n\nexport const POSTS_QUERY = gql`\n  query postsQuery {\n    posts {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => {\n  // const { loading, data, networkStatus } = useQuery(POSTS_QUERY, {\n  //   context: { clientName: \"wordPress\" },\n  //   notifyOnNetworkStatusChange: true,\n  // });\n\n  // const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n\n  // let posts;\n  // if (loading && !loadingArticle) {\n  //   posts = [];\n  // } else {\n  //   posts = data.posts.nodes;\n  // }\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n      <h1>Hello Next.js ðŸ‘‹</h1>\n      {/* {posts.map((item: any) => (<p>{item.id}</p>))} */}\n      <p>\n        <Link href=\"/about\">\n          <a>About</a>\n        </Link>\n      </p>\n    </Layout>\n  );\n};\n\nexport async function getServerSideProps() {\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: POSTS_QUERY,\n    context: { clientName: \"wordPress\" },\n  });\n\n  fetch('http://worpress:80/graphql')\n  .then(response => response.json())\n  .then(data => console.log(data))\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}