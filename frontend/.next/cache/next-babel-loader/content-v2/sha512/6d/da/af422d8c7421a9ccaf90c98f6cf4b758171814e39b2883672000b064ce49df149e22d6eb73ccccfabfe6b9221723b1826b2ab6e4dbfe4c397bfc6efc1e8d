{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/about.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { MENU_QUERY } from \"../components/Navbar\";\nimport { gql } from \"@apollo/client\";\nexport const TEAM_MEMBERS_QUERY = gql`\n  query teamMembersQuery(\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n  ) {\n    teamMembers(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          teamMember {\n            description\n            name\n            image {\n              sourceUrl\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst AboutPage = ({\n  errors,\n  menuListItems,\n  teamMembers\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      menuListItems: menuListItems,\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    menuListItems: menuListItems,\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, teamMembers.map(teamMember => {\n    const {\n      name,\n      description,\n      image\n    } = teamMember;\n\n    __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, name), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, description), __jsx(\"img\", {\n      src: image.sourceUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }));\n  }));\n};\n\nexport default AboutPage;\nexport const getStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n    let teamMembers = [];\n    let hasNextPage;\n    let nextCursor = null;\n\n    do {\n      const {\n        data\n      } = await apolloClient.query({\n        query: TEAM_MEMBERS_QUERY,\n        variables: {\n          first: 10,\n          last: null,\n          after: nextCursor,\n          before: null\n        },\n        context: {\n          clientName: \"wordPress\"\n        }\n      });\n      console.log(data.teamMembers.edges); //   teamMembers.push(\n      //     ...data.teamMembers.edges.map(\n      //       (node: { teamMember: TeamMember }) => node.teamMember\n      //     )\n      //   );\n\n      hasNextPage = data.teamMembers.pageInfo.hasNextPage;\n      nextCursor = data.teamMembers.pageInfo.endCursor;\n    } while (hasNextPage);\n\n    const menuListItems = await apolloClient.query({\n      query: MENU_QUERY,\n      context: {\n        clientName: \"wordPress\"\n      }\n    }).then(res => res.data.menuItems.nodes.map(node => ({\n      title: node.label,\n      pageURL: node.url\n    })));\n    return addApolloState(apolloClient, {\n      props: {\n        teamMembers,\n        menuListItems\n      }\n    });\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/about.tsx"],"names":["Layout","initializeApollo","addApolloState","MENU_QUERY","gql","TEAM_MEMBERS_QUERY","AboutPage","errors","menuListItems","teamMembers","color","map","teamMember","name","description","image","sourceUrl","getStaticProps","apolloClient","hasNextPage","nextCursor","data","query","variables","first","last","after","before","context","clientName","console","log","edges","pageInfo","endCursor","then","res","menuItems","nodes","node","title","label","pageURL","url","props","err","message"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { GetStaticProps } from \"next\";\nimport { MENU_QUERY, MenuListItem } from \"../components/Navbar\";\nimport { gql } from \"@apollo/client\";\n\nexport const TEAM_MEMBERS_QUERY = gql`\n  query teamMembersQuery(\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n  ) {\n    teamMembers(first: $first, last: $last, after: $after, before: $before) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          teamMember {\n            description\n            name\n            image {\n              sourceUrl\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype TeamMember = {\n  name: string;\n  description: string;\n  image: {\n    sourceUrl: string;\n  };\n};\n\ntype Props = {\n  errors?: string;\n  menuListItems: MenuListItem[];\n  teamMembers: TeamMember[];\n};\n\nconst AboutPage = ({ errors, menuListItems, teamMembers }: Props) => {\n  if (errors) {\n    return (\n      <Layout\n        menuListItems={menuListItems}\n        title=\"Error | Next.js + TypeScript Example\"\n      >\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      menuListItems={menuListItems}\n      title=\"Home | Next.js + TypeScript Example\"\n    >\n      {teamMembers.map((teamMember) => {\n        const { name, description, image } = teamMember;\n        <div>\n          <div>{name}</div>\n          <p>{description}</p>\n          <img src={image.sourceUrl} />\n        </div>;\n      })}\n    </Layout>\n  );\n};\n\nexport default AboutPage;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n    let teamMembers = [];\n    let hasNextPage;\n    let nextCursor = null;\n    do {\n      const { data }: any = await apolloClient.query({\n        query: TEAM_MEMBERS_QUERY,\n        variables: {\n          first: 10,\n          last: null,\n          after: nextCursor,\n          before: null,\n        },\n        context: { clientName: \"wordPress\" },\n      });\n\n      console.log(data.teamMembers.edges);\n      //   teamMembers.push(\n      //     ...data.teamMembers.edges.map(\n      //       (node: { teamMember: TeamMember }) => node.teamMember\n      //     )\n      //   );\n      hasNextPage = data.teamMembers.pageInfo.hasNextPage;\n      nextCursor = data.teamMembers.pageInfo.endCursor;\n    } while (hasNextPage);\n\n    const menuListItems = await apolloClient\n      .query({\n        query: MENU_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>\n        res.data.menuItems.nodes.map(\n          (node: { label: string; url: string }) => ({\n            title: node.label,\n            pageURL: node.url,\n          })\n        )\n      );\n\n    return addApolloState(apolloClient, {\n      props: {\n        teamMembers,\n        menuListItems,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}