{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/index.tsx\",\n    _this = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport PostsList from \"../components/PostsList\";\n\nvar IndexPage = function IndexPage(_ref) {\n  var posts = _ref.posts,\n      errors = _ref.errors,\n      numOfPages = _ref.numOfPages,\n      menuListItems = _ref.menuListItems;\n\n  if (errors) {\n    return __jsx(Layout, {\n      menuListItems: menuListItems,\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    menuListItems: menuListItems,\n    title: \"Home | Next.js + TypeScript Example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(PostsList, {\n    curDir: \"/posts\",\n    posts: posts,\n    pageNumber: 1,\n    numOfPages: numOfPages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = IndexPage;\nexport var __N_SSG = true;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/sajalrs/WebDevelopment/blog-jamstack/frontend/pages/index.tsx"],"names":["Layout","PostsList","IndexPage","posts","errors","numOfPages","menuListItems","color"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAIA,OAAOC,SAAP,MAA0C,yBAA1C;;AAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAyD;AAAA,MAAtDC,KAAsD,QAAtDA,KAAsD;AAAA,MAA/CC,MAA+C,QAA/CA,MAA+C;AAAA,MAAvCC,UAAuC,QAAvCA,UAAuC;AAAA,MAA3BC,aAA2B,QAA3BA,aAA2B;;AACzE,MAAIF,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AACE,MAAA,aAAa,EAAEE,aADjB;AAEE,MAAA,KAAK,EAAC,sCAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDH,MADhD,CAJF,CADF;AAUD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAEE,aADjB;AAEE,IAAA,KAAK,EAAC,qCAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,SAAD;AACE,IAAA,MAAM,EAAC,QADT;AAEE,IAAA,KAAK,EAAEH,KAFT;AAGE,IAAA,UAAU,EAAE,CAHd;AAIE,IAAA,UAAU,EAAEE,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAaD,CA3BD;;KAAMH,S;;AA6BN,eAAeA,SAAf","sourcesContent":["import Layout from \"../components/Layout\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { GetStaticProps } from \"next\";\nimport { Post } from \"./posts/[slug]\";\nimport PostsList, { ITEMS_PER_PAGE } from \"../components/PostsList\";\nimport { CURSORS_QUERY, POSTS_QUERY } from \"./posts/pages/[page]\";\nimport { MENU_QUERY, MenuListItem } from \"../components/Navbar\";\ntype Props = {\n  posts?: Post[];\n  errors?: string;\n  numOfPages: number;\n  menuListItems: MenuListItem[];\n};\n\nconst IndexPage = ({ posts, errors, numOfPages, menuListItems }: Props) => {\n  if (errors) {\n    return (\n      <Layout\n        menuListItems={menuListItems}\n        title=\"Error | Next.js + TypeScript Example\"\n      >\n        <p>\n          <span style={{ color: \"red\" }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      menuListItems={menuListItems}\n      title=\"Home | Next.js + TypeScript Example\"\n    >\n      <PostsList\n        curDir=\"/posts\"\n        posts={posts!}\n        pageNumber={1}\n        numOfPages={numOfPages}\n      />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    const apolloClient = initializeApollo();\n\n    const cursors = await apolloClient\n      .query({\n        query: CURSORS_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) => [\n        res.data.posts.edges[0],\n        ...res.data.posts.edges.filter(\n          (_: string, index: number) => (index + 1) % ITEMS_PER_PAGE === 0\n        ),\n      ]);\n\n    const { data } = await apolloClient.query({\n      query: POSTS_QUERY,\n      variables: {\n        first: ITEMS_PER_PAGE,\n        last: null,\n        after: null,\n        before: null,\n      },\n      context: { clientName: \"wordPress\" },\n    });\n\n    const menuListItems = await apolloClient\n      .query({\n        query: MENU_QUERY,\n        context: { clientName: \"wordPress\" },\n      })\n      .then((res) =>{\n        console.log(res.data.menuItems.edges[0])\n        return res.data.menuItems.edges.map((edge) => ({title: edge.node.label, pageURL: edge.node.url}))      \n      \n      } \n        );\n        \n\n      // res.data.menuItems.edges.map(\n      //   (node) => ({\n      //     title: node.label,\n      //     pageURL: node.url,\n      //   })\n      // )\n\n\n    return addApolloState(apolloClient, {\n      props: {\n        posts: data.posts.edges.map((edge: { node: Post }) => edge.node),\n        numOfPages: cursors.length,\n        menuListItems,\n      },\n    });\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}